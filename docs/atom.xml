<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Soylent Code]]></title>
    <link href="http://ryber.github.com/atom.xml" rel="self"/>
    <link href="http://ryber.github.com/"/>
    <updated>2022-01-07T13:30:38.095-06:00</updated>
    <id>http://ryber.github.com/</id>
    <author>
        <name><![CDATA[Ryan Bergman]]></name>

    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

        <entry>
            <title type="html"><![CDATA[Software Engineering Daily]]></title>
            <link href="/blog/2020/02/06/software-engineering-daily/"/>
            <updated>&lt;p&gt;I had the honor of appearing on &lt;a href&#61;&quot;https://softwareengineeringdaily.com/2020/02/03/john-deere-farm-software-with-ryan-bergman/&quot;&gt;&#39;Software Engineering Daily&#39; podcast&lt;/a&gt; to talk about practices at John Deere. Topics of discussion include autonomous vehicles, team autonomy and devops overload&lt;/p&gt;&#10;&lt;p&gt;Subscribe: &lt;a href&#61;&quot;https://itunes.apple.com/us/podcast/software-engineering-daily/id1019576853?mt&#61;2&amp;amp;ls&#61;1#episodeGuid&#61;http%3A%2F%2Fsoftwareengineeringdaily.com%2F%3Fp%3D8700&quot; title&#61;&quot;Subscribe on Apple Podcasts&quot; rel&#61;&quot;nofollow&quot;&gt;Apple Podcasts&lt;/a&gt; | &lt;a href&#61;&quot;https://subscribeonandroid.com/softwareengineeringdaily.com/feed/podcast/&quot; title&#61;&quot;Subscribe on Android&quot; rel&#61;&quot;nofollow&quot;&gt;Android&lt;/a&gt; | &lt;a href&#61;&quot;https://softwareengineeringdaily.com/feed/podcast/&quot; title&#61;&quot;Subscribe via RSS&quot; rel&#61;&quot;nofollow&quot;&gt;RSS&lt;/a&gt;&lt;/p&gt;&#10;&lt;audio controls&gt;&#10;  &lt;source src&#61;&quot;http://traffic.libsyn.com/sedaily/John_Deere_Engineering.mp3&quot; type&#61;&quot;audio/mpeg&quot;&gt;&#10;Your browser does not support the audio element.&#10;&lt;/audio&gt;&#10;&lt;p&gt;&lt;a href&#61;&quot;http://traffic.libsyn.com/sedaily/John_Deere_Engineering.mp3&quot; title&#61;&quot;Download&quot; rel&#61;&quot;nofollow&quot; download&#61;&quot;John_Deere_Engineering.mp3&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;&#10;</updated>
            <id>/blog/2020/02/06/software-engineering-daily/</id>
            <content type="html"><![CDATA[<p>I had the honor of appearing on <a href="https://softwareengineeringdaily.com/2020/02/03/john-deere-farm-software-with-ryan-bergman/">'Software Engineering Daily' podcast</a> to talk about practices at John Deere. Topics of discussion include autonomous vehicles, team autonomy and devops overload</p>
<p>Subscribe: <a href="https://itunes.apple.com/us/podcast/software-engineering-daily/id1019576853?mt=2&amp;ls=1#episodeGuid=http%3A%2F%2Fsoftwareengineeringdaily.com%2F%3Fp%3D8700" title="Subscribe on Apple Podcasts" rel="nofollow">Apple Podcasts</a> | <a href="https://subscribeonandroid.com/softwareengineeringdaily.com/feed/podcast/" title="Subscribe on Android" rel="nofollow">Android</a> | <a href="https://softwareengineeringdaily.com/feed/podcast/" title="Subscribe via RSS" rel="nofollow">RSS</a></p>
<audio controls>
  <source src="http://traffic.libsyn.com/sedaily/John_Deere_Engineering.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>
<p><a href="http://traffic.libsyn.com/sedaily/John_Deere_Engineering.mp3" title="Download" rel="nofollow" download="John_Deere_Engineering.mp3">Download</a></p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Walking Into Mordor]]></title>
            <link href="/blog/2019/09/30/walking-into-mordor/"/>
            <updated>&lt;p&gt;This is probably my favorite talk I&#39;ve ever done. The video is from DevOpsDays -  Des Moines&lt;/p&gt;&#10;&lt;iframe width&#61;&quot;560&quot; height&#61;&quot;315&quot; src&#61;&quot;https://www.youtube.com/embed/k6_xlRUNzF0&quot; frameborder&#61;&quot;0&quot; allow&#61;&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/e/2PACX-1vTMuwKDPIo7BEn3ftVW0CEFn9ixRxgwG7jebqrvYiMgDuWyGpmo9Rym4KRBV_V0dURIZIBFwOuciAs_/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;299&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2019/09/30/walking-into-mordor/</id>
            <content type="html"><![CDATA[<p>This is probably my favorite talk I've ever done. The video is from DevOpsDays -  Des Moines</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/k6_xlRUNzF0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTMuwKDPIo7BEn3ftVW0CEFn9ixRxgwG7jebqrvYiMgDuWyGpmo9Rym4KRBV_V0dURIZIBFwOuciAs_/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Monoliths vs Microservices]]></title>
            <link href="/blog/2018/08/07/monoliths-vs-microservices/"/>
            <updated>&lt;p&gt;Here is the deck from my Agile 2018 presentation on Monoliths vs Microservices:&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/e/2PACX-1vQbtuFYw1Q2sa3QefLXlSF0Lpg23xNfnmtP0WgEB2wOyBygHQmOFQEGbkS9syO_9KgdRQSpEEB-XxJs/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;299&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2018/08/07/monoliths-vs-microservices/</id>
            <content type="html"><![CDATA[<p>Here is the deck from my Agile 2018 presentation on Monoliths vs Microservices:</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQbtuFYw1Q2sa3QefLXlSF0Lpg23xNfnmtP0WgEB2wOyBygHQmOFQEGbkS9syO_9KgdRQSpEEB-XxJs/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Aesthetic Criticism]]></title>
            <link href="/blog/2018/08/07/aesthetic-criticism/"/>
            <updated>&lt;p&gt;Here is the deck from my Agile 2018 presentation on Aesthetic Criticism for software teams:&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/e/2PACX-1vRSDuIbTCSXjhB-CqVO84jkSz830tCY3lR_24I28ULb6znkE4WGagSZDvBS3JOs2jbIG62e7PU4BsBR/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;299&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2018/08/07/aesthetic-criticism/</id>
            <content type="html"><![CDATA[<p>Here is the deck from my Agile 2018 presentation on Aesthetic Criticism for software teams:</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRSDuIbTCSXjhB-CqVO84jkSz830tCY3lR_24I28ULb6znkE4WGagSZDvBS3JOs2jbIG62e7PU4BsBR/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[The Nature Of Programming]]></title>
            <link href="/blog/2017/08/24/the-nature-of-programming/"/>
            <updated>&lt;p&gt;In the weeks since the google manifesto I’ve been thinking about what I see as a fundamental misunderstanding the nature of software development I wanted to get it off my chest.&lt;/p&gt;&#10;&lt;h4&gt;Is Programming Math and Engineering?&lt;/h4&gt;&#10;&lt;p&gt;Yes! Of course it is. Where the author fails is in narrowly defining math and engineering to traditionally male dominated professions. Historically and across cultures women have dominated domestic crafts. Weaving, knitting, embroidery, tailoring, basket and pottery making are all forms of “thing thinking” that require high-level problem solving, mathematics and a deep understanding of materials. Yet we do not value them at the same level of men’s work. This is partially due to the more temporal and replaceable nature of these crafts but it’s also because we do not value women at the same level we value men. So we call the things men do “engineering” and the work women do “crafts”. The fact that men’s traditional crafts involve stone and metal, and women’s involve clay and yarn is irrelevant to the skills needed or women’s interest in them. Just ask Hobby Lobby.&lt;/p&gt;&#10;&lt;p&gt;&lt;a href&#61;&quot;https://commons.wikimedia.org/wiki/File:Loomwork.jpg#/media/File:Loomwork.jpg&quot;&gt;&lt;img src&#61;&quot;https://upload.wikimedia.org/wikipedia/commons/8/8d/Loomwork.jpg&quot; alt&#61;&quot;Loomwork.jpg&quot; height&#61;&quot;480&quot; width&#61;&quot;640&quot;&gt;&lt;/a&gt;&lt;div style&#61;&quot;font-size:8px&quot;&gt;photo by &lt;a href&#61;&quot;https://en.wikipedia.org/wiki/User:Randyoo&quot; class&#61;&quot;extiw&quot; title&#61;&quot;en:User:Randyoo&quot;&gt;Randy Oostdyk&lt;/a&gt;, &lt;a href&#61;&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot; title&#61;&quot;Creative Commons Attribution-Share Alike 3.0&quot;&gt;CC BY-SA 3.0&lt;/a&gt;, &lt;a href&#61;&quot;https://commons.wikimedia.org/w/index.php?curid&#61;1314700&quot;&gt;Link&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&#10;&lt;i&gt;Weaving involves configuring complex repeating patterns of information into a machine that renders that information to new forms. (Sound familiar?)&lt;/i&gt;&lt;/p&gt;&#10;  &lt;/p&gt;&#10;&lt;h4&gt;Is Programming Human Language?&lt;/h4&gt;&#10;&lt;p&gt;Yes! Of course it is. When we program we have several different audiences. The compiler or runtime is one. Other developers that must read and understand our program is another. Some of the worst code I’ve ever worked on was written by coders with poor communication skills. Naming things is hard, composing code into a readable flow is hard. By applying basic composition skills to our code we can help those that come after us.&lt;/p&gt;&#10;&lt;p&gt;Larry Wall, the creator of the massively influential Perl programming language has spoken and written extensively on the connection between human linguistics and programming. Perl itself was informed and designed with linguistic principles.&lt;/p&gt;&#10;&lt;iframe width&#61;&quot;560&quot; height&#61;&quot;315&quot; src&#61;&quot;https://www.youtube.com/embed/ju1IMxGSuNE&quot; frameborder&#61;&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;h4&gt;Is Programming Applied Sociology?&lt;/h4&gt;&#10;&lt;p&gt;Yes! Of course it is. As all programmers who have been around a while will tell you. Writing the right code is much harder than writing the code right. Programmers must be part of the process of gathering requirements and empathising with customers. We have to work hard to ask the right questions, give meaningful critiques, and understand the problems that need to be solved.&lt;/p&gt;&#10;&lt;h4&gt;Is Programming STEM?&lt;/h4&gt;&#10;&lt;p&gt;Maybe? My personal feeling is that part of the problem of getting women and men who do not conform to stereotypical “Big Bang Theory” nerdom is in the public perception and marketing of the career. We are working against a harmful and counterproductive vision of the coder as a socially awkward genius sitting in a dark room. Most programming isn’t writing router software or physics engines.  Developing software for humans requires a high degree of general purpose problem solving, teamwork and empathy. Many of the best programmers I’ve worked with did not come into programming through traditional educational paths and I’m not convinced that grouping programming with math and engineering is beneficial to it from a marketing perspective. Perhaps it should be in business, design, or even on it’s own.&lt;/p&gt;&#10;&lt;p&gt;We are also working against a toxic and misogynistic culture that drives the women who do want to engage out. The most baffling thing about the manifesto is it’s choice to basically ignore the voices of women who will tell you why they left. It’s not a mystery we need brain scans to find out. Just ask.&lt;/p&gt;&#10;</updated>
            <id>/blog/2017/08/24/the-nature-of-programming/</id>
            <content type="html"><![CDATA[<p>In the weeks since the google manifesto I’ve been thinking about what I see as a fundamental misunderstanding the nature of software development I wanted to get it off my chest.</p>
<h4>Is Programming Math and Engineering?</h4>
<p>Yes! Of course it is. Where the author fails is in narrowly defining math and engineering to traditionally male dominated professions. Historically and across cultures women have dominated domestic crafts. Weaving, knitting, embroidery, tailoring, basket and pottery making are all forms of “thing thinking” that require high-level problem solving, mathematics and a deep understanding of materials. Yet we do not value them at the same level of men’s work. This is partially due to the more temporal and replaceable nature of these crafts but it’s also because we do not value women at the same level we value men. So we call the things men do “engineering” and the work women do “crafts”. The fact that men’s traditional crafts involve stone and metal, and women’s involve clay and yarn is irrelevant to the skills needed or women’s interest in them. Just ask Hobby Lobby.</p>
<p><a href="https://commons.wikimedia.org/wiki/File:Loomwork.jpg#/media/File:Loomwork.jpg"><img src="https://upload.wikimedia.org/wikipedia/commons/8/8d/Loomwork.jpg" alt="Loomwork.jpg" height="480" width="640"></a><div style="font-size:8px">photo by <a href="https://en.wikipedia.org/wiki/User:Randyoo" class="extiw" title="en:User:Randyoo">Randy Oostdyk</a>, <a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=1314700">Link</a><br /></div>
<i>Weaving involves configuring complex repeating patterns of information into a machine that renders that information to new forms. (Sound familiar?)</i></p>
  </p>
<h4>Is Programming Human Language?</h4>
<p>Yes! Of course it is. When we program we have several different audiences. The compiler or runtime is one. Other developers that must read and understand our program is another. Some of the worst code I’ve ever worked on was written by coders with poor communication skills. Naming things is hard, composing code into a readable flow is hard. By applying basic composition skills to our code we can help those that come after us.</p>
<p>Larry Wall, the creator of the massively influential Perl programming language has spoken and written extensively on the connection between human linguistics and programming. Perl itself was informed and designed with linguistic principles.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ju1IMxGSuNE" frameborder="0" allowfullscreen></iframe>
<h4>Is Programming Applied Sociology?</h4>
<p>Yes! Of course it is. As all programmers who have been around a while will tell you. Writing the right code is much harder than writing the code right. Programmers must be part of the process of gathering requirements and empathising with customers. We have to work hard to ask the right questions, give meaningful critiques, and understand the problems that need to be solved.</p>
<h4>Is Programming STEM?</h4>
<p>Maybe? My personal feeling is that part of the problem of getting women and men who do not conform to stereotypical “Big Bang Theory” nerdom is in the public perception and marketing of the career. We are working against a harmful and counterproductive vision of the coder as a socially awkward genius sitting in a dark room. Most programming isn’t writing router software or physics engines.  Developing software for humans requires a high degree of general purpose problem solving, teamwork and empathy. Many of the best programmers I’ve worked with did not come into programming through traditional educational paths and I’m not convinced that grouping programming with math and engineering is beneficial to it from a marketing perspective. Perhaps it should be in business, design, or even on it’s own.</p>
<p>We are also working against a toxic and misogynistic culture that drives the women who do want to engage out. The most baffling thing about the manifesto is it’s choice to basically ignore the voices of women who will tell you why they left. It’s not a mystery we need brain scans to find out. Just ask.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Viscosity vs Velocity]]></title>
            <link href="/blog/2016/08/22/viscosity-vs-velocity/"/>
            <updated>&lt;p&gt;Velocity is a largely meaningless “measurement”. It’s relative, it’s based on estimation (which we are all horrible at), and it’s subject to all kinds of external forces that impact teams.&lt;/p&gt;&#10;&lt;p&gt;A much better thing to measure are the forces hampering our teams from delivering. I like to think of this as viscosity. In science, viscosity is a measurement for how fluid a liquid is.  Water flows faster and easier than honey. Similarly, our teams will go as fast as they are capable of. The real issue is finding what is slowing them down.&lt;/p&gt;&#10;&lt;p&gt;I came up with an entirely unscientific method for calculating a team’s viscosity. In the course of a team delivering something to their customer:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;&lt;strong&gt;Start with 1 point&lt;/strong&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;Add 1 Point&lt;/strong&gt; for each external team or person (not on the team) you are dependent on in order to deliver. This could be DBA’s architects, operations, security, marketing, etc etc. It could also be another team responsible for some other part of a feature. Maybe your teams are split between “back end” and “UI” for example.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;Add 1 Point&lt;/strong&gt; for each required technology needed that your team is not proficient in.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;Easy huh? Your goal is a value of &lt;strong&gt;1&lt;/strong&gt;. Obviously not all values of 1 are equal but it should give you a target to work on. You are free to play with the point system. Maybe dependencies outside of your company or area cost more?&lt;/p&gt;&#10;&lt;p&gt;Teams that are self sufficient are going to be faster or at least be more responsible for their own speed. What would it take to get a team with all of the skills and people needed to deliver?&lt;/p&gt;&#10;&lt;p&gt;Of course teams impact other teams. Viscosity is all about how a liquid moves in relation to itself. What’s really fun is to take all of the viscosity points for an organization and cross them together. So rather than just run the points of each team, inherit the points from your dependencies. So if your team is dependent on a team with a viscosity of 5 then you now also have 5 as well (plus whatever else).&lt;/p&gt;&#10;&lt;p&gt;Map this out and you will start to see the big bottlenecks of your organization. You could create a nice dependency graph and watch as it explodes. Teams that should be really fast suddenly look slow because of a web of other slow teams (usually built to “support” them).&lt;/p&gt;&#10;&lt;img src&#61;&quot;/assets/images/viscosity.png&quot; align&#61;&quot;right&quot; /&gt;&#10;</updated>
            <id>/blog/2016/08/22/viscosity-vs-velocity/</id>
            <content type="html"><![CDATA[<p>Velocity is a largely meaningless “measurement”. It’s relative, it’s based on estimation (which we are all horrible at), and it’s subject to all kinds of external forces that impact teams.</p>
<p>A much better thing to measure are the forces hampering our teams from delivering. I like to think of this as viscosity. In science, viscosity is a measurement for how fluid a liquid is.  Water flows faster and easier than honey. Similarly, our teams will go as fast as they are capable of. The real issue is finding what is slowing them down.</p>
<p>I came up with an entirely unscientific method for calculating a team’s viscosity. In the course of a team delivering something to their customer:</p>
<ol>
<li><strong>Start with 1 point</strong></li>
<li><strong>Add 1 Point</strong> for each external team or person (not on the team) you are dependent on in order to deliver. This could be DBA’s architects, operations, security, marketing, etc etc. It could also be another team responsible for some other part of a feature. Maybe your teams are split between “back end” and “UI” for example.</li>
<li><strong>Add 1 Point</strong> for each required technology needed that your team is not proficient in.</li>
</ol>
<p>Easy huh? Your goal is a value of <strong>1</strong>. Obviously not all values of 1 are equal but it should give you a target to work on. You are free to play with the point system. Maybe dependencies outside of your company or area cost more?</p>
<p>Teams that are self sufficient are going to be faster or at least be more responsible for their own speed. What would it take to get a team with all of the skills and people needed to deliver?</p>
<p>Of course teams impact other teams. Viscosity is all about how a liquid moves in relation to itself. What’s really fun is to take all of the viscosity points for an organization and cross them together. So rather than just run the points of each team, inherit the points from your dependencies. So if your team is dependent on a team with a viscosity of 5 then you now also have 5 as well (plus whatever else).</p>
<p>Map this out and you will start to see the big bottlenecks of your organization. You could create a nice dependency graph and watch as it explodes. Teams that should be really fast suddenly look slow because of a web of other slow teams (usually built to “support” them).</p>
<img src="/assets/images/viscosity.png" align="right" />
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[So What Do We Do With The Architects?]]></title>
            <link href="/blog/2015/08/04/so-what-do-we-do-with-the-architects/"/>
            <updated>&lt;p&gt;Here is the deck from my Agile 2015 presentation on Architects:&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/11jAnJwOLOS6RoRzGYkz7Qy6QOBNFCa3U5lx4fD_DuNo/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;389&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2015/08/04/so-what-do-we-do-with-the-architects/</id>
            <content type="html"><![CDATA[<p>Here is the deck from my Agile 2015 presentation on Architects:</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/11jAnJwOLOS6RoRzGYkz7Qy6QOBNFCa3U5lx4fD_DuNo/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[How we saved $200,000 per year with a hackathon]]></title>
            <link href="/blog/2015/03/28/how-we-saved-00/"/>
            <updated>&lt;p&gt;At my current gig we have a fairly large Java web application. It has a Fitnesse suite of around 2000 tests that until recently took about 12-13 minutes to run on a good machine.&lt;/p&gt;&#10;&lt;p&gt;One of our developers (&lt;a href&#61;&quot;https://twitter.com/briandanenhauer&quot;&gt;@briandanenhauer&lt;/a&gt;) felt the there was something wrong with that time and used one of our hackathons to do something about it. He ran the tests under a profiler and found a significant problem with the way we (and Fitnesse) were wiring in fixtures.&lt;/p&gt;&#10;&lt;p&gt;Fitnesse has a Import fixture which can be used to import the java packages containing your fixtures. For example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;|Import|&#10;|info.fitnesse.fixturegallery|&#10;|info.fitnesse.anotherPackage|&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Our project had attempted to package our fixtures into feature specific packages. Over time this had left us with over 50 fixture sub-packages.&lt;/p&gt;&#10;&lt;p&gt;Whenever Fitnesse needed to find a fixture it would loop over the list of imports and look in each package for the fixture. If it didn’t find it it would throw an exception up and then continue looking until it found it. This was resulting in literally millions of exceptions being thrown throughout the run of the main suite.&lt;/p&gt;&#10;&lt;p&gt;@briandanenhauer did the simple thing and flattened all of our fixtures into one package and one corresponding row in the import fixture.&lt;/p&gt;&#10;&lt;p&gt;The the result was dramatic. A full build of our system went from 13-14 minutes to 6-7! The team was floored and there was much rejoycing! &lt;img src&#61;&quot;/assets/images/rejoicing.gif&quot; align&#61;&quot;right&quot; /&gt;&#10;I did a very quick and dirty calculation on the savings in dev time and came up with $200,000 per year for our staff. That would be if every developer ran verify only once per workday (and we know it’s more).&#10;That’s a powerful argument for hackathons or just letting your developers have time to make their projects better.&lt;/p&gt;&#10;</updated>
            <id>/blog/2015/03/28/how-we-saved-00/</id>
            <content type="html"><![CDATA[<p>At my current gig we have a fairly large Java web application. It has a Fitnesse suite of around 2000 tests that until recently took about 12-13 minutes to run on a good machine.</p>
<p>One of our developers (<a href="https://twitter.com/briandanenhauer">@briandanenhauer</a>) felt the there was something wrong with that time and used one of our hackathons to do something about it. He ran the tests under a profiler and found a significant problem with the way we (and Fitnesse) were wiring in fixtures.</p>
<p>Fitnesse has a Import fixture which can be used to import the java packages containing your fixtures. For example:</p>
<pre><code>|Import|
|info.fitnesse.fixturegallery|
|info.fitnesse.anotherPackage|
</code></pre>
<p>Our project had attempted to package our fixtures into feature specific packages. Over time this had left us with over 50 fixture sub-packages.</p>
<p>Whenever Fitnesse needed to find a fixture it would loop over the list of imports and look in each package for the fixture. If it didn’t find it it would throw an exception up and then continue looking until it found it. This was resulting in literally millions of exceptions being thrown throughout the run of the main suite.</p>
<p>@briandanenhauer did the simple thing and flattened all of our fixtures into one package and one corresponding row in the import fixture.</p>
<p>The the result was dramatic. A full build of our system went from 13-14 minutes to 6-7! The team was floored and there was much rejoycing! <img src="/assets/images/rejoicing.gif" align="right" />
I did a very quick and dirty calculation on the savings in dev time and came up with $200,000 per year for our staff. That would be if every developer ran verify only once per workday (and we know it’s more).
That’s a powerful argument for hackathons or just letting your developers have time to make their projects better.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Are Programmers Engineers?]]></title>
            <link href="/blog/2015/03/22/are-programmers-engineers/"/>
            <updated>&lt;p&gt;Last week at O&#39;Reilly’s Software Architecture Conference Glenn Vanderburg from LivingSocial referenced (anonymously) &lt;a href&#61;&quot;https://twitter.com/ryber/status/562310762979655680&quot;&gt;something I tweeted&lt;/a&gt; a few months back about software engineering. It’s a very good presentation and I think Glenn makes a very strong argument that programming is engineering. Go ahead and watch it. My tweet comes in early around 1:07&lt;/p&gt;&#10;&lt;iframe width&#61;&quot;560&quot; height&#61;&quot;315&quot; src&#61;&quot;https://www.youtube.com/embed/zDEpeWQHtFU&quot; frameborder&#61;&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;p&gt;I can remember when I made that tweet and I was thinking less about if programming itself was engineering and more about if programmers were engineers. My father was an architect who designed prisons, schools and shopping malls (ok, all prisons). My father-in-law is a mechanical engineer who worked for the US Army Corps of Engineers on top secret projects like the stealth bomber. So I am loath to call myself an architect or an engineer in their presence.&lt;/p&gt;&#10;&lt;p&gt;As my father once said when I told him I was considering taking a job as a software architect: “pssh, you’re not an architect until you prove to the state that your work isn’t going to kill someone”&lt;/p&gt;&#10;&lt;p&gt;That’s an important point. Architects and engineers (at least structural, mechanical and civil) are required to go through a rigorous education, licensing and accreditation systems. They are legally liable for their work and they are keenly aware that they have the public’s lives in their hands.&lt;/p&gt;&#10;&lt;p&gt;In software development you can take a 3 week Node.js bootcamp from a 22 year old and get a job writing financial systems.&lt;/p&gt;&#10;&lt;p&gt;If programming is engineering. How do we get programmers to act like engineers (i.e. professionals)?&lt;/p&gt;&#10;&lt;p&gt;There is an almost unlimited demand for programmers that need to write everything from missile guidance systems to cheap Candy Crush knock-offs and we seem to have almost no control at all over how these developers are educated. The universities don&#39;t teach the art of programming. Most employers don&#39;t either. I love the craftsman movement but so far it only exists in it&#39;s own little alternate reality bubble.&lt;/p&gt;&#10;&lt;p&gt;It occurred to me while watching Glenn that the attitude I (and many others) have had of deriding programming as engineering serves to feed into the idea that writing crap software is ok. Perhaps if we reorient a little towards calling our practice engineering it would help foster the professionalism many of us long for.&lt;/p&gt;&#10;</updated>
            <id>/blog/2015/03/22/are-programmers-engineers/</id>
            <content type="html"><![CDATA[<p>Last week at O'Reilly’s Software Architecture Conference Glenn Vanderburg from LivingSocial referenced (anonymously) <a href="https://twitter.com/ryber/status/562310762979655680">something I tweeted</a> a few months back about software engineering. It’s a very good presentation and I think Glenn makes a very strong argument that programming is engineering. Go ahead and watch it. My tweet comes in early around 1:07</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zDEpeWQHtFU" frameborder="0" allowfullscreen></iframe>
<p>I can remember when I made that tweet and I was thinking less about if programming itself was engineering and more about if programmers were engineers. My father was an architect who designed prisons, schools and shopping malls (ok, all prisons). My father-in-law is a mechanical engineer who worked for the US Army Corps of Engineers on top secret projects like the stealth bomber. So I am loath to call myself an architect or an engineer in their presence.</p>
<p>As my father once said when I told him I was considering taking a job as a software architect: “pssh, you’re not an architect until you prove to the state that your work isn’t going to kill someone”</p>
<p>That’s an important point. Architects and engineers (at least structural, mechanical and civil) are required to go through a rigorous education, licensing and accreditation systems. They are legally liable for their work and they are keenly aware that they have the public’s lives in their hands.</p>
<p>In software development you can take a 3 week Node.js bootcamp from a 22 year old and get a job writing financial systems.</p>
<p>If programming is engineering. How do we get programmers to act like engineers (i.e. professionals)?</p>
<p>There is an almost unlimited demand for programmers that need to write everything from missile guidance systems to cheap Candy Crush knock-offs and we seem to have almost no control at all over how these developers are educated. The universities don't teach the art of programming. Most employers don't either. I love the craftsman movement but so far it only exists in it's own little alternate reality bubble.</p>
<p>It occurred to me while watching Glenn that the attitude I (and many others) have had of deriding programming as engineering serves to feed into the idea that writing crap software is ok. Perhaps if we reorient a little towards calling our practice engineering it would help foster the professionalism many of us long for.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Developers In Wonderland]]></title>
            <link href="/blog/2015/02/22/developers-in-wonderland/"/>
            <updated>&lt;p&gt;Last week I posted a fun little troll of Java on the Twitters and it kind of blew up.&lt;/p&gt;&#10;&lt;blockquote class&#61;&quot;twitter-tweet&quot; lang&#61;&quot;en&quot;&gt;&lt;p&gt;Everyone enjoys trolling JavaScript for it&amp;#39;s weirdness but everyone has something. Here&amp;#39;s Java &lt;a href&#61;&quot;http://t.co/SszNlbefLP&quot;&gt;pic.twitter.com/SszNlbefLP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ryan Bergman (@ryber) &lt;a href&#61;&quot;https://twitter.com/ryber/status/567681894662164480&quot;&gt;February 17, 2015&lt;/a&gt;&lt;/blockquote&gt;&#10;&lt;script async src&#61;&quot;//platform.twitter.com/widgets.js&quot; charset&#61;&quot;utf-8&quot;&gt;&lt;/script&gt;&#10;&lt;p&gt;What I got in response (besides the retweets and favs) was a lot of people who felt the need to inform me of why each line was the way it was (and in some cases how stupid I was for not knowing it). I started to experience a phenomenon that is quite common amongst software developers that I like to call “Wonderland Syndrome”.&lt;/p&gt;&#10;&lt;blockquote style&#61;&quot;font-size:110%&quot;&gt;&#10;“But I don’t want to go among mad people,&quot; Alice remarked.&lt;br/&gt;&#10;&quot;Oh, you can’t help that,&quot; said the Cat: &quot;we’re all mad here. I’m mad. You’re mad.&quot;&lt;br/&gt;&#10;&quot;How do you know I’m mad?&quot; said Alice.&lt;br/&gt;&#10;&quot;You must be,&quot; said the Cat, &quot;or you wouldn’t have come here.”&lt;br/&gt;&#10;― Lewis Carroll, Alice in Wonderland&lt;br/&gt;&#10;&lt;/blockquote&gt;&#10;&lt;p&gt;Apart from Alice and the Cheshire Cat nobody in Wonderland knew that they were mad. This attitude, to simply accept the rules a system has given to you whether they are logical and good or not is actually a strength in computer programming. In a &lt;a href&#61;&quot;http://www.eis.mdx.ac.uk/research/PhDArea/saeed/paper1.pdf&quot;&gt;paper from Middlesex University&lt;/a&gt; it was found that successful CS majors were better able to accept and understand the sometimes odd rules of computers.&lt;/p&gt;&#10;&lt;blockquote style&#61;&quot;font-size:110%&quot;&gt;&#10;“To write a computer program you have to come to terms with this, to accept that whatever you might want the program to mean, the machine will blindly follow its meaningless rules and come to some meaningless conclusion”&#10;&lt;/blockquote&gt;&#10;&lt;p&gt;It&#39;s also why we all love puns so much. The problem comes when this understanding moves into an orthodoxy around how it should be. None of the examples in the tweet show this more than the response to the last item. Some people seemed incensed that I apparently didn’t understand that prefixing a number with 0 indicated an octal number and that this is how it was in C and many other languages. &lt;a href&#61;&quot;https://www.gnu.org/fun/jokes/ed-msg.html&quot;&gt;&amp;quot;0 is the standard!&amp;quot;&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;0 is a horrible thing to use to indicate octal. My 3rd grader can tell you that leading zeros are not significant and so &lt;code&gt;022 - 2 &#61; 20&lt;/code&gt;. Why must we surprise everyone with something different? Maybe 43 years ago when C was being created on PDP-8s with 12 bit words it was the only thing to do. I tend to think that even then anything else would have been better.&lt;/p&gt;&#10;&lt;p&gt;Fast forward to 1995 and Java had no reason at all to continue with it. I believe they did so simply because of Wonderland Syndrome. &amp;quot;Of course octals start with 0, and hedgehogs make perfect croquet balls.&amp;quot;&lt;/p&gt;&#10;&lt;p&gt;Yet here we are, running caucus-races to get dry and fixing bugs because of the limitations of a 43 year old computer. THAT my friends, is the WTF.&lt;/p&gt;&#10;</updated>
            <id>/blog/2015/02/22/developers-in-wonderland/</id>
            <content type="html"><![CDATA[<p>Last week I posted a fun little troll of Java on the Twitters and it kind of blew up.</p>
<blockquote class="twitter-tweet" lang="en"><p>Everyone enjoys trolling JavaScript for it&#39;s weirdness but everyone has something. Here&#39;s Java <a href="http://t.co/SszNlbefLP">pic.twitter.com/SszNlbefLP</a></p>&mdash; Ryan Bergman (@ryber) <a href="https://twitter.com/ryber/status/567681894662164480">February 17, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What I got in response (besides the retweets and favs) was a lot of people who felt the need to inform me of why each line was the way it was (and in some cases how stupid I was for not knowing it). I started to experience a phenomenon that is quite common amongst software developers that I like to call “Wonderland Syndrome”.</p>
<blockquote style="font-size:110%">
“But I don’t want to go among mad people," Alice remarked.<br/>
"Oh, you can’t help that," said the Cat: "we’re all mad here. I’m mad. You’re mad."<br/>
"How do you know I’m mad?" said Alice.<br/>
"You must be," said the Cat, "or you wouldn’t have come here.”<br/>
― Lewis Carroll, Alice in Wonderland<br/>
</blockquote>
<p>Apart from Alice and the Cheshire Cat nobody in Wonderland knew that they were mad. This attitude, to simply accept the rules a system has given to you whether they are logical and good or not is actually a strength in computer programming. In a <a href="http://www.eis.mdx.ac.uk/research/PhDArea/saeed/paper1.pdf">paper from Middlesex University</a> it was found that successful CS majors were better able to accept and understand the sometimes odd rules of computers.</p>
<blockquote style="font-size:110%">
“To write a computer program you have to come to terms with this, to accept that whatever you might want the program to mean, the machine will blindly follow its meaningless rules and come to some meaningless conclusion”
</blockquote>
<p>It's also why we all love puns so much. The problem comes when this understanding moves into an orthodoxy around how it should be. None of the examples in the tweet show this more than the response to the last item. Some people seemed incensed that I apparently didn’t understand that prefixing a number with 0 indicated an octal number and that this is how it was in C and many other languages. <a href="https://www.gnu.org/fun/jokes/ed-msg.html">&quot;0 is the standard!&quot;</a></p>
<p>0 is a horrible thing to use to indicate octal. My 3rd grader can tell you that leading zeros are not significant and so <code>022 - 2 = 20</code>. Why must we surprise everyone with something different? Maybe 43 years ago when C was being created on PDP-8s with 12 bit words it was the only thing to do. I tend to think that even then anything else would have been better.</p>
<p>Fast forward to 1995 and Java had no reason at all to continue with it. I believe they did so simply because of Wonderland Syndrome. &quot;Of course octals start with 0, and hedgehogs make perfect croquet balls.&quot;</p>
<p>Yet here we are, running caucus-races to get dry and fixing bugs because of the limitations of a 43 year old computer. THAT my friends, is the WTF.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Microservices as Jars]]></title>
            <link href="/blog/2014/12/04/microservices-as-jars/"/>
            <updated>&lt;p&gt;A couple of months ago Uncle Bob Matrin wrote about &lt;a href&#61;&quot;http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html&quot;&gt;microservices as jars&lt;/a&gt; (or gems or dlls etc). I’ve been harboring the same idea for a while so I was encouraged to see him talking about it. I’ve also seen both positive and downright hostile responses to him. I’ve been honing in on a way to do this and I think I see where the hostility comes from.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/Kim_Cheese.jpg&quot; align&#61;&quot;right&quot; /&gt; You see there are two rules about microservices. 1) They need to be isolated and 2) They need to be more isolated than that. In fact they need to be Kim Jong-un isolated. When you run a microservice as it’s own deployable behind it’s own REST interface then it’s easy. You can use whatever libraries, languages, even operating systems you want. However, when deploying a jar inside of another application you are suddenly no longer free. The runtime will demand only one version of your orgs favorite MVC for example, and everyone better be on the same page.&lt;/p&gt;&#10;&lt;p&gt;So when crafting a jar you need to be dependent on as little as possible. I personally find freedom from frameworks liberating. Besides it’s a “MICRO” service, you don’t need an IOC framework or an ORM at all. In practice I can see many organizations having problems with this, Green developers like glueing frameworks together. Things like Spring make it look like it would be easy to just add yet another jar into the component scan. You need to stop! Because that leads to the dark side….dependency, coupling, and weeks spent upgrading 20 jars at once to Spring 4.1.X when just one of them needs to go.&lt;/p&gt;&#10;&lt;p&gt;I know Uncle Bob knows all this already. I’m not sure he emphasized it enough or appreciates how many people will attempt to implement his idea in completely wrong ways.&lt;/p&gt;&#10;&lt;p&gt;But I’m going to do it anyway.&lt;/p&gt;&#10;</updated>
            <id>/blog/2014/12/04/microservices-as-jars/</id>
            <content type="html"><![CDATA[<p>A couple of months ago Uncle Bob Matrin wrote about <a href="http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html">microservices as jars</a> (or gems or dlls etc). I’ve been harboring the same idea for a while so I was encouraged to see him talking about it. I’ve also seen both positive and downright hostile responses to him. I’ve been honing in on a way to do this and I think I see where the hostility comes from.</p>
<p><img src="/assets/images/Kim_Cheese.jpg" align="right" /> You see there are two rules about microservices. 1) They need to be isolated and 2) They need to be more isolated than that. In fact they need to be Kim Jong-un isolated. When you run a microservice as it’s own deployable behind it’s own REST interface then it’s easy. You can use whatever libraries, languages, even operating systems you want. However, when deploying a jar inside of another application you are suddenly no longer free. The runtime will demand only one version of your orgs favorite MVC for example, and everyone better be on the same page.</p>
<p>So when crafting a jar you need to be dependent on as little as possible. I personally find freedom from frameworks liberating. Besides it’s a “MICRO” service, you don’t need an IOC framework or an ORM at all. In practice I can see many organizations having problems with this, Green developers like glueing frameworks together. Things like Spring make it look like it would be easy to just add yet another jar into the component scan. You need to stop! Because that leads to the dark side….dependency, coupling, and weeks spent upgrading 20 jars at once to Spring 4.1.X when just one of them needs to go.</p>
<p>I know Uncle Bob knows all this already. I’m not sure he emphasized it enough or appreciates how many people will attempt to implement his idea in completely wrong ways.</p>
<p>But I’m going to do it anyway.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Trolling Technology]]></title>
            <link href="/blog/2014/10/21/trolling-technology/"/>
            <updated>&lt;p&gt;I&#39;ve been upgrading frameworks in a number of projects lately and I felt the need to rant about frameworks I really dislike.&lt;/p&gt;&#10;&lt;h3&gt;HAML&lt;/h3&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/hipster_cat.jpg&quot; align&#61;&quot;right&quot; /&gt; Several years ago some hipster programmers were frustrated by HTML. Since dogs and babies were qualified to write HTML they weren&#39;t able to let everyone else know how awesome they were on 100% of a project. So they invented HAML to protect their smartypants status.&lt;/p&gt;&#10;&lt;p&gt;The main battle cry of HAML seems to be that you can write HTML “faster”. As if writing HTML was the bottleneck of programming. If your main bottleneck is writing HTML then either you are the the most awesome programmer on the face of the planet and you need to quit writing web sites and start finding a cure for ebola or you don’t work on anything remotely difficult (lucky you). Thankfully &lt;a href&#61;&quot;https://docs.oseems.com/general/application/vim/auto-complete-html&quot;&gt;every&lt;/a&gt; &lt;a href&#61;&quot;http://web-mode.org/&quot;&gt;text editor&lt;/a&gt; &lt;a href&#61;&quot;https://www.sublimetext.com/docs/2/auto_complete.html&quot;&gt;on earth&lt;/a&gt; &lt;a href&#61;&quot;http://superuser.com/questions/131542/html-tag-auto-complete-in-notepad&quot;&gt;autocompletes&lt;/a&gt; &lt;a href&#61;&quot;http://www.barebones.com/support/bbedit/arch_bbedit9.html&quot;&gt;HTML&lt;/a&gt;. Which means HAML is a problem disguised as a solution to a problem that doesn’t exist.&lt;/p&gt;&#10;&lt;p&gt;(note that I don’t feel the same about SAAS or LESS which at least help to fix some of the major problems with the W3C’s &lt;a href&#61;&quot;https://infrequently.org/2007/09/css-3-a-giant-serving-of-fail/&quot;&gt;biggest failure&lt;/a&gt;: CSS)&lt;/p&gt;&#10;&lt;h3&gt;ORM&#39;s&lt;/h3&gt;&#10;&lt;p&gt;Hibernate, Rails, iBatis, whatever. ORMs do two things: 1) Save you from writing a bunch of mundane crap early in a project and 2) Guarantee you will spend oodles of time trying to debug a labyrinthian hellhole later in the project. This is the root of what I like to call the the &amp;quot;Law Of Frameworks&amp;quot; which states&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Any framework designed to keep you from&#10;thinking about a thing will force you to&#10;have to think about that thing in more&#10;difficult ways than if you had not used it.&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;I&#39;ve seen team after team, project after project waste weeks to months fighting ORM&#39;s. Stop the madness!&lt;/p&gt;&#10;&lt;h3&gt;YAML&lt;/h3&gt;&#10;&lt;p&gt;See HAML. Use JSON.&lt;/p&gt;&#10;&lt;h3&gt;Apache HttpClient (any version)&lt;/h3&gt;&#10;&lt;p&gt;Try to think of the most convoluted and stupid way to make a web request. Then make it dumber than that and require at least eight classes to do it. This is HttpClient. This is why people hate Java.&lt;/p&gt;&#10;&lt;h3&gt;AOP&lt;/h3&gt;&#10;&lt;p&gt;There is nothing worse than a method suddenly working differently in your production code than it does in tests. This is what AOP does. Making it the antithesis of the &lt;a href&#61;&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of least astonishment&lt;/a&gt;. ORM’s often make use of AOP which should be a sign. As does the last item.&lt;/p&gt;&#10;&lt;h3&gt;Spring&lt;/h3&gt;&#10;&lt;p&gt;Spring is the most cargo-culted software framework in the world. Almost nobody understands the entire thing. At best people learn a small bit for a little while. Then they leave it alone for 6 months and forget. The framework itself it a giant magical mudball that configures itself with annotations and XML (yes I know about the Java configs but those are not 100%, nor are they really much better). Almost nothing is obvious or simple.   StackOverflow is &lt;a href&#61;&quot;http://stackoverflow.com/questions/18022571/aspect-tag-on-spring-is-not-recognized&quot;&gt;littered&lt;/a&gt; with questions about &lt;a href&#61;&quot;http://stackoverflow.com/questions/26281715/is-spring-startup-impacted-by-order-on-disk&quot;&gt;completely obscure&lt;/a&gt;, &lt;a href&#61;&quot;http://stackoverflow.com/questions/3896013/no-adapter-for-handler-exception/3896018&quot;&gt;unhelpful&lt;/a&gt;, and &lt;a href&#61;&quot;http://stackoverflow.com/questions/1468657/spring-weird-error-in-bean-creation&quot;&gt;downright weird&lt;/a&gt; errors. The answers (if they have one) are often something along the lines of “oh you forgot to implement and register the AbstractSingletonProxyFactoryBean: (which is a convenient proxy factory bean superclass for proxy factory beans that create only singletons of course). The answer almost never explains what the hell any of this means. Just worship the coke bottle correctly and the bean will show up with candy on the spring equinox!&lt;/p&gt;&#10;&lt;p&gt;If ever you choose to upgrade Spring you will find that half the classes you used before have been replaced by other classes that don’t do the same things.&lt;/p&gt;&#10;&lt;p&gt;This is the other reason people hate Java.&lt;/p&gt;&#10;</updated>
            <id>/blog/2014/10/21/trolling-technology/</id>
            <content type="html"><![CDATA[<p>I've been upgrading frameworks in a number of projects lately and I felt the need to rant about frameworks I really dislike.</p>
<h3>HAML</h3>
<p><img src="/assets/images/hipster_cat.jpg" align="right" /> Several years ago some hipster programmers were frustrated by HTML. Since dogs and babies were qualified to write HTML they weren't able to let everyone else know how awesome they were on 100% of a project. So they invented HAML to protect their smartypants status.</p>
<p>The main battle cry of HAML seems to be that you can write HTML “faster”. As if writing HTML was the bottleneck of programming. If your main bottleneck is writing HTML then either you are the the most awesome programmer on the face of the planet and you need to quit writing web sites and start finding a cure for ebola or you don’t work on anything remotely difficult (lucky you). Thankfully <a href="https://docs.oseems.com/general/application/vim/auto-complete-html">every</a> <a href="http://web-mode.org/">text editor</a> <a href="https://www.sublimetext.com/docs/2/auto_complete.html">on earth</a> <a href="http://superuser.com/questions/131542/html-tag-auto-complete-in-notepad">autocompletes</a> <a href="http://www.barebones.com/support/bbedit/arch_bbedit9.html">HTML</a>. Which means HAML is a problem disguised as a solution to a problem that doesn’t exist.</p>
<p>(note that I don’t feel the same about SAAS or LESS which at least help to fix some of the major problems with the W3C’s <a href="https://infrequently.org/2007/09/css-3-a-giant-serving-of-fail/">biggest failure</a>: CSS)</p>
<h3>ORM's</h3>
<p>Hibernate, Rails, iBatis, whatever. ORMs do two things: 1) Save you from writing a bunch of mundane crap early in a project and 2) Guarantee you will spend oodles of time trying to debug a labyrinthian hellhole later in the project. This is the root of what I like to call the the &quot;Law Of Frameworks&quot; which states</p>
<pre><code>Any framework designed to keep you from
thinking about a thing will force you to
have to think about that thing in more
difficult ways than if you had not used it.
</code></pre>
<p>I've seen team after team, project after project waste weeks to months fighting ORM's. Stop the madness!</p>
<h3>YAML</h3>
<p>See HAML. Use JSON.</p>
<h3>Apache HttpClient (any version)</h3>
<p>Try to think of the most convoluted and stupid way to make a web request. Then make it dumber than that and require at least eight classes to do it. This is HttpClient. This is why people hate Java.</p>
<h3>AOP</h3>
<p>There is nothing worse than a method suddenly working differently in your production code than it does in tests. This is what AOP does. Making it the antithesis of the <a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least astonishment</a>. ORM’s often make use of AOP which should be a sign. As does the last item.</p>
<h3>Spring</h3>
<p>Spring is the most cargo-culted software framework in the world. Almost nobody understands the entire thing. At best people learn a small bit for a little while. Then they leave it alone for 6 months and forget. The framework itself it a giant magical mudball that configures itself with annotations and XML (yes I know about the Java configs but those are not 100%, nor are they really much better). Almost nothing is obvious or simple.   StackOverflow is <a href="http://stackoverflow.com/questions/18022571/aspect-tag-on-spring-is-not-recognized">littered</a> with questions about <a href="http://stackoverflow.com/questions/26281715/is-spring-startup-impacted-by-order-on-disk">completely obscure</a>, <a href="http://stackoverflow.com/questions/3896013/no-adapter-for-handler-exception/3896018">unhelpful</a>, and <a href="http://stackoverflow.com/questions/1468657/spring-weird-error-in-bean-creation">downright weird</a> errors. The answers (if they have one) are often something along the lines of “oh you forgot to implement and register the AbstractSingletonProxyFactoryBean: (which is a convenient proxy factory bean superclass for proxy factory beans that create only singletons of course). The answer almost never explains what the hell any of this means. Just worship the coke bottle correctly and the bean will show up with candy on the spring equinox!</p>
<p>If ever you choose to upgrade Spring you will find that half the classes you used before have been replaced by other classes that don’t do the same things.</p>
<p>This is the other reason people hate Java.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Building an Airplane While Flying]]></title>
            <link href="/blog/2014/08/02/building-an-airplane-while-flying/"/>
            <updated>&lt;p&gt;Here is the deck from my &lt;a href&#61;&quot;http://agile2014.sched.org/event/e1fccc9283f8fa229f154da3f7eb63f6#.U9zLm41dVy8&quot;&gt;Agile 2014&lt;/a&gt; presentation.&#10;If you would like to see it live I&#39;ll be presenting it again at &lt;a href&#61;&quot;http://dsmagile.agileiowa.org/&quot;&gt;dsmAgile&lt;/a&gt;&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/13ykd_jO18gOzQZ9zvwsCQI78nygWVwoyUjHdhINX9sA/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;484&quot; height&#61;&quot;288&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt; &#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2014/08/02/building-an-airplane-while-flying/</id>
            <content type="html"><![CDATA[<p>Here is the deck from my <a href="http://agile2014.sched.org/event/e1fccc9283f8fa229f154da3f7eb63f6#.U9zLm41dVy8">Agile 2014</a> presentation.
If you would like to see it live I'll be presenting it again at <a href="http://dsmagile.agileiowa.org/">dsmAgile</a></p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/13ykd_jO18gOzQZ9zvwsCQI78nygWVwoyUjHdhINX9sA/embed?start=false&loop=false&delayms=3000" frameborder="0" width="484" height="288" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe> 
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Real Options For Technical Debt]]></title>
            <link href="/blog/2014/06/21/real-options-for-technical-debt/"/>
            <updated>&lt;p&gt;The other night I gave a presentation on real options and technical debt to the &lt;a href&#61;&quot;http://www.agileiowa.org/2014/06/12/real-options-for-technical-debt/&quot;&gt;Agile Iowa&lt;/a&gt; group. We had a great conversation about it afterwards. I was asked to post the deck so here it is.&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/1QPx8ufyPb3Qnh2fnq7m8cLIhS_dfcTRGQVsOioQl6Ng/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;5000&quot;&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;484&quot; height&#61;&quot;288&quot;   allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2014/06/21/real-options-for-technical-debt/</id>
            <content type="html"><![CDATA[<p>The other night I gave a presentation on real options and technical debt to the <a href="http://www.agileiowa.org/2014/06/12/real-options-for-technical-debt/">Agile Iowa</a> group. We had a great conversation about it afterwards. I was asked to post the deck so here it is.</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/1QPx8ufyPb3Qnh2fnq7m8cLIhS_dfcTRGQVsOioQl6Ng/embed?start=false&loop=false&delayms=5000"" frameborder="0" width="484" height="288"   allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[The Case Of The Lost Commits]]></title>
            <link href="/blog/2014/03/22/the-case-of-the-lost-commits/"/>
            <updated>&lt;p&gt;Recently at my gig we converted a large project from HG to Git. There are a lot of developers on this project; many who have never worked on Git so I expected a few bumps. So far it’s actually been pretty smooth sailing but yesterday I was contacted by a dev with a Git problem I had never seen.&lt;/p&gt;&#10;&lt;p&gt;The day before he had made a commit and pushed it to the server but now the content of the commit was gone. Not reverted mind you, just gone, like it had never happened even though the commit was clearly still in history.&lt;/p&gt;&#10;&lt;p&gt;To be clear, looking at the history of the entire repo showed the commit and it’s changes as something that happened. But looking at any of the individual files in the commits didn’t show the commit at all. WTF?!&lt;/p&gt;&#10;&lt;p&gt;This turned out to be the result of a bad merge by another developer. I was able to recreate the scenario, take a look at the weird history:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git log --graph --oneline --all&#10;*   1b4cd92 Bad merge by dev B&#10;|\  &#10;| * e879eb6 This is the missing commit by dev A&#10;* | 93933b9 commit by dev B&#10;|/  &#10;* 6baed99 root commit&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Here we can see that e879eb6 is in history. You can see that part of that commit was a change to foo:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git whatchanged e879eb6&#10;commit e879eb6007ddef2a955a71651bcf31a25727b510&#10;Author: ryber&#10;Date:   Sat Mar 22 16:37:28 2014 -0500&#10;&#10;    This is the missing commit by dev A&#10;&#10;:100644 100644 eb314de... e3525a0... M  baz&#10;:100644 100644 ae3cab0... cf561bd... M  foo&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Yet, if we look at the history of foo that e879eb6 is missing!&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git log --pretty&#61;oneline --abbrev-commit -- foo&#10;6baed99 root commit&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;What happened here? Where did e879eb6 go in the history of foo? I can understand if the change was reverted but shouldn&#39;t we see some history of that revert? This is where we get into the bad merge&lt;/p&gt;&#10;&lt;p&gt;You may have notice that the missing commit includes another change to the “baz” file. It turns out that the second dev also changed baz in 93933b9 and was forced to go into a merge conflict when he pulled. To someone new to git the merge process might be a bit shocking. This is because you see all of the changes impacted by the merge. This includes your own changes as well as all of the changes to files in the tree you are merging in that happened after your last common ancestor. Developer B was presented with something like this when he was merging:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git status&#10;On branch master&#10;Your branch and &#39;origin/master&#39; have diverged,&#10;and have 1 and 1 different commit each, respectively.&#10;  (use &amp;quot;git pull&amp;quot; to merge the remote branch into yours)&#10;&#10;You have unmerged paths.&#10;  (fix conflicts and run &amp;quot;git commit&amp;quot;)&#10;&#10;Changes to be committed:&#10;&#10;&#9;modified:   foo&#10;&#10;Unmerged paths:&#10;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)&#10;&#10;&#9;both modified:      baz&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;You might think “What the hell? I didn’t change foo?! Why is foo here?”. You might even attempt to get rid of the foo changes … which is exactly what happened. It’s actually kind of hard to do from the shell but fairly easy to do from some gui tools like SourceTree. From the shell you just have to issue a checkout of a previous version like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git checkout HEAD^ -- foo&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Then an add, and a commit and voilà! The file has now been reverted to it’s previous state as part of a merge and it’s individual content history no longer contains the missing commit.&lt;/p&gt;&#10;&lt;p&gt;You may be wondering how we got out of this mess? We simply cherry-picked the commits back into the head. Not very subtle but it worked.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;ryber$ git cherry-pick e879eb6&#10;&lt;/code&gt;&lt;/pre&gt;&#10;</updated>
            <id>/blog/2014/03/22/the-case-of-the-lost-commits/</id>
            <content type="html"><![CDATA[<p>Recently at my gig we converted a large project from HG to Git. There are a lot of developers on this project; many who have never worked on Git so I expected a few bumps. So far it’s actually been pretty smooth sailing but yesterday I was contacted by a dev with a Git problem I had never seen.</p>
<p>The day before he had made a commit and pushed it to the server but now the content of the commit was gone. Not reverted mind you, just gone, like it had never happened even though the commit was clearly still in history.</p>
<p>To be clear, looking at the history of the entire repo showed the commit and it’s changes as something that happened. But looking at any of the individual files in the commits didn’t show the commit at all. WTF?!</p>
<p>This turned out to be the result of a bad merge by another developer. I was able to recreate the scenario, take a look at the weird history:</p>
<pre><code>ryber$ git log --graph --oneline --all
*   1b4cd92 Bad merge by dev B
|\  
| * e879eb6 This is the missing commit by dev A
* | 93933b9 commit by dev B
|/  
* 6baed99 root commit
</code></pre>
<p>Here we can see that e879eb6 is in history. You can see that part of that commit was a change to foo:</p>
<pre><code>ryber$ git whatchanged e879eb6
commit e879eb6007ddef2a955a71651bcf31a25727b510
Author: ryber
Date:   Sat Mar 22 16:37:28 2014 -0500

    This is the missing commit by dev A

:100644 100644 eb314de... e3525a0... M  baz
:100644 100644 ae3cab0... cf561bd... M  foo
</code></pre>
<p>Yet, if we look at the history of foo that e879eb6 is missing!</p>
<pre><code>ryber$ git log --pretty=oneline --abbrev-commit -- foo
6baed99 root commit
</code></pre>
<p>What happened here? Where did e879eb6 go in the history of foo? I can understand if the change was reverted but shouldn't we see some history of that revert? This is where we get into the bad merge</p>
<p>You may have notice that the missing commit includes another change to the “baz” file. It turns out that the second dev also changed baz in 93933b9 and was forced to go into a merge conflict when he pulled. To someone new to git the merge process might be a bit shocking. This is because you see all of the changes impacted by the merge. This includes your own changes as well as all of the changes to files in the tree you are merging in that happened after your last common ancestor. Developer B was presented with something like this when he was merging:</p>
<pre><code>ryber$ git status
On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)

You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)

Changes to be committed:

	modified:   foo

Unmerged paths:
  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)

	both modified:      baz
</code></pre>
<p>You might think “What the hell? I didn’t change foo?! Why is foo here?”. You might even attempt to get rid of the foo changes … which is exactly what happened. It’s actually kind of hard to do from the shell but fairly easy to do from some gui tools like SourceTree. From the shell you just have to issue a checkout of a previous version like this:</p>
<pre><code>ryber$ git checkout HEAD^ -- foo
</code></pre>
<p>Then an add, and a commit and voilà! The file has now been reverted to it’s previous state as part of a merge and it’s individual content history no longer contains the missing commit.</p>
<p>You may be wondering how we got out of this mess? We simply cherry-picked the commits back into the head. Not very subtle but it worked.</p>
<pre><code>ryber$ git cherry-pick e879eb6
</code></pre>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Music For Coding]]></title>
            <link href="/blog/2014/01/05/music-for-coding/"/>
            <updated>&lt;p&gt;A short list of my favorite coding music:&lt;/p&gt;&#10;&lt;h2&gt;Information Society &lt;img alt&#61;&quot;Hack&quot; align&#61;&quot;right&quot; src&#61;&quot;http://upload.wikimedia.org/wikipedia/en/thumb/2/2d/Hack_InSoc_cover.jpg/220px-Hack_InSoc_cover.jpg&quot; width&#61;&quot;220&quot; height&#61;&quot;218&quot; /&gt;&lt;/h2&gt;&#10;&lt;p&gt;In the late 80’s and early 90’s as I was getting into hacker culture InSoc was a major influence for me and my friends. They have everything: songs inspired by William Gibson’s cyberpunk novels, love songs to Nikola Tesla and IBM, samples from Star Trek, and a sound that gave the impression it was made on an Amega at 3:00 am after they left a rave. Best of all they regularly encoded messages and hacker challenges into analog data-sound tracks at the end of their albums. The minute a band has you wiring your CD player into an old handset modem they’ve won.&lt;/p&gt;&#10;&lt;h2&gt;Kraftwerk: The Mix &lt;img alt&#61;&quot;The Mix&quot; align&#61;&quot;right&quot; src&#61;&quot;http://upload.wikimedia.org/wikipedia/en/thumb/0/00/The_Mix.jpg/220px-The_Mix.jpg&quot; width&#61;&quot;220&quot; height&#61;&quot;219&quot; /&gt;&lt;/h2&gt;&#10;&lt;p&gt;It may be cliche for a programmer to love Kraftwerk, but I don’t care. More than just a best-of “The Mix” is rare in the world of electronic re-mix albums in that it’s mostly better than the originals. I particularly find the version of “Computer Love” to be the best out there.&#10;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&#10;&lt;h2&gt;Robyn: Body Talk &lt;img alt&#61;&quot;Body Talk&quot;  align&#61;&quot;right&quot; src&#61;&quot;http://upload.wikimedia.org/wikipedia/en/thumb/7/70/Body_Talk.jpg/220px-Body_Talk.jpg&quot; width&#61;&quot;220&quot; height&#61;&quot;220&quot; class&#61;&quot;thumbborder&quot; /&gt;&lt;/h2&gt;&#10;&lt;p&gt;Don’t chalk up Robyn as just another disposable  dance club act. The electronic music she produces is impeccably produced and well crafted. It has numerous interesting patterns and layers that pay back on repeated plays. The Body Talk series is by far the best. For something even more abstract check out her work with Röyksopp.&lt;/p&gt;&#10;&lt;h2&gt;Santigold &lt;img alt&#61;&quot;Santigold&quot; align&#61;&quot;right&quot; src&#61;&quot;//upload.wikimedia.org/wikipedia/en/thumb/d/db/Santogoldalbum.jpg/220px-Santogoldalbum.jpg&quot; width&#61;&quot;220&quot; height&#61;&quot;220&quot; /&gt;&lt;/h2&gt;&#10;&lt;p&gt;Whenever I listen to Santigold I imagine this is the music the the rastafarian hackers from space station Zion are listening to in Neuromancer.&#10;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&#10;&lt;h2&gt;The Soundtrack to Conan the Barbarian &lt;img align&#61;&quot;right&quot; alt&#61;&quot;A man, wearing nothing but a loincloth and a horned helm, strides forth, holding a sword aloft in his left hand. A blond woman kneels in front of him, holding a curved blade with both hands.&quot; src&#61;&quot;http:////upload.wikimedia.org/wikipedia/en/thumb/8/81/Conan_the_Barbarian_by_Renato_Casaro.jpg/220px-Conan_the_Barbarian_by_Renato_Casaro.jpg&quot; width&#61;&quot;220&quot; height&#61;&quot;312&quot; /&gt;&lt;/h2&gt;&#10;&lt;p&gt;The soundtrack was made first, and then the movie was basically a giant music video for a remix of Carmina Burana. Perfect background music for epic coding.&lt;/p&gt;&#10;&lt;h2&gt;A few others&lt;/h2&gt;&#10;&lt;p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;Gary Numan&lt;/li&gt;&#10;&lt;li&gt;The KLF aka The Justified Ancients of Mu Mu aka The Timelords&lt;/li&gt;&#10;&lt;li&gt;The Orb&lt;/li&gt;&#10;&lt;li&gt;Aphex Twin &lt;/li&gt;&#10;&lt;li&gt;Brian Eno&lt;/li&gt;&#10;&lt;li&gt;Daivd Bowie’s Berlin trilogy (Low, Heroes, Lodger)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;</updated>
            <id>/blog/2014/01/05/music-for-coding/</id>
            <content type="html"><![CDATA[<p>A short list of my favorite coding music:</p>
<h2>Information Society <img alt="Hack" align="right" src="http://upload.wikimedia.org/wikipedia/en/thumb/2/2d/Hack_InSoc_cover.jpg/220px-Hack_InSoc_cover.jpg" width="220" height="218" /></h2>
<p>In the late 80’s and early 90’s as I was getting into hacker culture InSoc was a major influence for me and my friends. They have everything: songs inspired by William Gibson’s cyberpunk novels, love songs to Nikola Tesla and IBM, samples from Star Trek, and a sound that gave the impression it was made on an Amega at 3:00 am after they left a rave. Best of all they regularly encoded messages and hacker challenges into analog data-sound tracks at the end of their albums. The minute a band has you wiring your CD player into an old handset modem they’ve won.</p>
<h2>Kraftwerk: The Mix <img alt="The Mix" align="right" src="http://upload.wikimedia.org/wikipedia/en/thumb/0/00/The_Mix.jpg/220px-The_Mix.jpg" width="220" height="219" /></h2>
<p>It may be cliche for a programmer to love Kraftwerk, but I don’t care. More than just a best-of “The Mix” is rare in the world of electronic re-mix albums in that it’s mostly better than the originals. I particularly find the version of “Computer Love” to be the best out there.
<br /><br /></p>
<h2>Robyn: Body Talk <img alt="Body Talk"  align="right" src="http://upload.wikimedia.org/wikipedia/en/thumb/7/70/Body_Talk.jpg/220px-Body_Talk.jpg" width="220" height="220" class="thumbborder" /></h2>
<p>Don’t chalk up Robyn as just another disposable  dance club act. The electronic music she produces is impeccably produced and well crafted. It has numerous interesting patterns and layers that pay back on repeated plays. The Body Talk series is by far the best. For something even more abstract check out her work with Röyksopp.</p>
<h2>Santigold <img alt="Santigold" align="right" src="//upload.wikimedia.org/wikipedia/en/thumb/d/db/Santogoldalbum.jpg/220px-Santogoldalbum.jpg" width="220" height="220" /></h2>
<p>Whenever I listen to Santigold I imagine this is the music the the rastafarian hackers from space station Zion are listening to in Neuromancer.
<br /><br /><br /><br /></p>
<h2>The Soundtrack to Conan the Barbarian <img align="right" alt="A man, wearing nothing but a loincloth and a horned helm, strides forth, holding a sword aloft in his left hand. A blond woman kneels in front of him, holding a curved blade with both hands." src="http:////upload.wikimedia.org/wikipedia/en/thumb/8/81/Conan_the_Barbarian_by_Renato_Casaro.jpg/220px-Conan_the_Barbarian_by_Renato_Casaro.jpg" width="220" height="312" /></h2>
<p>The soundtrack was made first, and then the movie was basically a giant music video for a remix of Carmina Burana. Perfect background music for epic coding.</p>
<h2>A few others</h2>
<p>
<ul>
<li>Gary Numan</li>
<li>The KLF aka The Justified Ancients of Mu Mu aka The Timelords</li>
<li>The Orb</li>
<li>Aphex Twin </li>
<li>Brian Eno</li>
<li>Daivd Bowie’s Berlin trilogy (Low, Heroes, Lodger)</li>
</ul>
</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Get Off My Lawn]]></title>
            <link href="/blog/2013/12/27/get-off-my-lawn/"/>
            <updated>&lt;p&gt;Back when I first learned to program we didn’t have fancy “IDEs” or “text editors” that let you scroll through “files”. Hell we didn’t even have files. We wrote our code directly into a terminal one line at a time and if we needed to edit that line we rewrote it entirely. We could only see about 20 lines of our programs at any given time and that was all we needed. We didn’t have a dozen other windows for “file explorers” or “unit test runners” or any of the other useless crap kids these days fit on their screens.&lt;/p&gt;&#10;&lt;p&gt;The reason we didn’t have any of that is because our computers could only do one thing and that was run a BASIC interpreter. We didn’t have “hard drives” and only the fancy pants kids had disk drives of any kind. On my block you turned on your computer, you programmed it to do something, and then you turned it off, and when you did your program went away. I used to program games and then keep my computer running for weeks so I could keep playing it. Eventually I did get a cassette tape recorder that could save data. It saved my games sometimes and would load the ones it did save...sometimes. I’d say it had about a 30% success rate at doing anything successfully.  The rest of the time you just re-wrote the program again.&lt;/p&gt;&#10;&lt;p&gt;Back in those days we didn’t have the “internet”, so there was no “Stack Overflow” or “GitHub” where you could find out how to code. You had to subscribe to a magazine like &lt;a href&#61;&quot;http://en.wikipedia.org/wiki/Byte_(magazine)&quot;&gt;Byte&lt;/a&gt; that had programs written into the back of it. You would copy the entire program by hand and then spend several hours trying to figure out where you copied it wrong. Then once you finally had something that worked you could experiment by changing lines. That&#39;s how we learned.&lt;/p&gt;&#10;&lt;p&gt;If you did want to program anything more complicated than printing your name over and over you had to plan how many lines you thought a section would take beforehand. You see we didn’t have “classes” or “functions”. We just had blocks of code that took up a section of numbered lines. You thought “I think the code necessary to draw this sprite will take up 10 lines”. So you set aside lines 500-599 because you knew you were always wrong my at least a factor of 10. And if you needed more after that you had to keep the rest of the lines somewhere else because 600 was probably already taken. You couldn’t just lazily hit return 20 times and have everything move for you. It just didn’t work that way and besides, we couldn’t waste valuable bytes on luxuries like carriage returns!&lt;/p&gt;&#10;&lt;p&gt;You always kept a notebook next to you where you documented where the lines of various subroutines were because the computer sure as hell wasn’t going to help you. All you could do was list the program, or list a range of line numbers. “But why don’t you just pipe it through grep” you say? Because I ain’t some damn college professor that’s why! These are home computers dag-nabbit not some million dollar Unix server from Ma Bell. We didn’t have “grep” or “sed” or “pipes”. We had LIST...and we liked it!&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/TImainscreen.gif&quot; alt&#61;&quot;TI 99/4a homescreen&quot; align&#61;&quot;left&quot; hspace&#61;&quot;10&quot; /&gt;My first computer was a TI 99/4a. It had a 16 bit 3 MHz processor and came with 256 bytes of RAM and 16kb of extended VRAM. That was more than enough for any of the programs I wrote at home. I made my own knock offs of games like Centipede, Pong and Bezerk. Just let that sink in for a moment. Centipede, written in BASIC, in under 16kb of RAM. When Bill Gates supposedly said that nobody would ever need more than 640kb of ram we all believed him because that was an INSANE amount of memory. At the time I couldn’t even fathom what I would possibly use that much memory for. You can only run one program at a time anyway.&lt;/p&gt;&#10;&lt;p&gt;We take for granted how luxurious software development is today. We have endless supplies of ram and disk. It’s easy to forget that not long ago we had almost nothing and yet we did amazing things, and made amazing messes of our code. Some things never change. Happy New Year and GET OFF MY LAWN!&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/12/27/get-off-my-lawn/</id>
            <content type="html"><![CDATA[<p>Back when I first learned to program we didn’t have fancy “IDEs” or “text editors” that let you scroll through “files”. Hell we didn’t even have files. We wrote our code directly into a terminal one line at a time and if we needed to edit that line we rewrote it entirely. We could only see about 20 lines of our programs at any given time and that was all we needed. We didn’t have a dozen other windows for “file explorers” or “unit test runners” or any of the other useless crap kids these days fit on their screens.</p>
<p>The reason we didn’t have any of that is because our computers could only do one thing and that was run a BASIC interpreter. We didn’t have “hard drives” and only the fancy pants kids had disk drives of any kind. On my block you turned on your computer, you programmed it to do something, and then you turned it off, and when you did your program went away. I used to program games and then keep my computer running for weeks so I could keep playing it. Eventually I did get a cassette tape recorder that could save data. It saved my games sometimes and would load the ones it did save...sometimes. I’d say it had about a 30% success rate at doing anything successfully.  The rest of the time you just re-wrote the program again.</p>
<p>Back in those days we didn’t have the “internet”, so there was no “Stack Overflow” or “GitHub” where you could find out how to code. You had to subscribe to a magazine like <a href="http://en.wikipedia.org/wiki/Byte_(magazine)">Byte</a> that had programs written into the back of it. You would copy the entire program by hand and then spend several hours trying to figure out where you copied it wrong. Then once you finally had something that worked you could experiment by changing lines. That's how we learned.</p>
<p>If you did want to program anything more complicated than printing your name over and over you had to plan how many lines you thought a section would take beforehand. You see we didn’t have “classes” or “functions”. We just had blocks of code that took up a section of numbered lines. You thought “I think the code necessary to draw this sprite will take up 10 lines”. So you set aside lines 500-599 because you knew you were always wrong my at least a factor of 10. And if you needed more after that you had to keep the rest of the lines somewhere else because 600 was probably already taken. You couldn’t just lazily hit return 20 times and have everything move for you. It just didn’t work that way and besides, we couldn’t waste valuable bytes on luxuries like carriage returns!</p>
<p>You always kept a notebook next to you where you documented where the lines of various subroutines were because the computer sure as hell wasn’t going to help you. All you could do was list the program, or list a range of line numbers. “But why don’t you just pipe it through grep” you say? Because I ain’t some damn college professor that’s why! These are home computers dag-nabbit not some million dollar Unix server from Ma Bell. We didn’t have “grep” or “sed” or “pipes”. We had LIST...and we liked it!</p>
<p><img src="/assets/images/TImainscreen.gif" alt="TI 99/4a homescreen" align="left" hspace="10" />My first computer was a TI 99/4a. It had a 16 bit 3 MHz processor and came with 256 bytes of RAM and 16kb of extended VRAM. That was more than enough for any of the programs I wrote at home. I made my own knock offs of games like Centipede, Pong and Bezerk. Just let that sink in for a moment. Centipede, written in BASIC, in under 16kb of RAM. When Bill Gates supposedly said that nobody would ever need more than 640kb of ram we all believed him because that was an INSANE amount of memory. At the time I couldn’t even fathom what I would possibly use that much memory for. You can only run one program at a time anyway.</p>
<p>We take for granted how luxurious software development is today. We have endless supplies of ram and disk. It’s easy to forget that not long ago we had almost nothing and yet we did amazing things, and made amazing messes of our code. Some things never change. Happy New Year and GET OFF MY LAWN!</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[What Developers Want]]></title>
            <link href="/blog/2013/10/07/what-developers-want/"/>
            <updated>&lt;p&gt;The other day I got a email from a recruiter. Now, I get stuff from recruiters all the time but this one stuck out a bit because it didn’t follow the standard line. I hope she doesn’t mind but I decided I wanted to answer her questions here on my blog because I think they are important.&lt;/p&gt;&#10;&lt;p&gt;Her main question was: “What do developers really want out of professional opportunities that they might not be getting with their current employers? To put it another way, what are the things that entice you guys?”&lt;/p&gt;&#10;&lt;p&gt;That’s an interesting question. What DO we want? Why do some employers have a bad rap in town while others seem to have their pick of the top developers?&lt;/p&gt;&#10;&lt;p&gt;First off I want to dispel one myth. The recruiter followed her question up with “My inclination is that money is a secondary factor when seeking out new grounds for professional growth”. Yes and no. Money is not the ONLY factor but it certainly is a large factor and it can easily disqualify an employer from a job search. Especially for the top talent in town who may be accustomed to a certain lifestyle. We all live in this same economy. We have families and children we want to send to college. We want to take that trip to New Zealand. We want a nice home. Money is a factor. Your job as an employer is to make sure that it’s not a negative when I’m considering you. It’s quite insulting and sad when you meet someone who thinks a beer fridge and a foosball table somehow makes up for low salaries. It doesn’t.&lt;/p&gt;&#10;&lt;p&gt;That said, while pay is a factor for why we might NOT take a job it’s not an indicator of why I might take a job, or stay at a job. As long as the pay is in a competitive range the other factors come to the front. So what are those factors?&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;“Self-Determination”. People want to feel like they are contributing to solutions. They want to bring value to their clients. The absolute last thing they want is to feel like some cog responsible for implementing someone else&#39;s design. This is why top-down architecture is so detrimental to good teams. I want some amount of influence over the design, the architecture, and the tools. I want to feel like when I come to work people want me to be there because they value my contributions, opinions and the code I write. Most importantly, if something is in my way, or is inefficient, and I have a better way to solve it, I want the power to solve it. Nothing is more frustrating than being told. “Yea, we know it sucks, but we have to do it that way because [corporate policy, Joffrey the “Architect” said so, we always did it that way, derp].”&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;Customer feedback: I want to know that the work I’m doing matters. Make sure developers have the opportunity to interact with customers, even if that is part of market research or trade conferences. Ideally I want constant feedback from a product owner who works with the development staff every day and makes sure we are working on the right things.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;A cool project with cool technologies: As developers we like cool things and cool toys. I realize sometimes you’re an insurance company and there is little you can do to make your app more exciting. That just means you need to get creative. Sorry but nobody wants to work on a legacy struts app running on Websphere.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;XP: I can’t speak for everyone on this but I think I speak for a growing majority. I will not consider a job where XP practices are not followed and embraced. Particularly BDD/TDD and CI. I’m also cool if you’re not there yet and you want me to help you get there. Just don’t be wishy washy about it. XP is the one exception to rule #1. Everyone needs to get on board. We are professionals, act like it and take your craft seriously.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ol&gt;&#10;</updated>
            <id>/blog/2013/10/07/what-developers-want/</id>
            <content type="html"><![CDATA[<p>The other day I got a email from a recruiter. Now, I get stuff from recruiters all the time but this one stuck out a bit because it didn’t follow the standard line. I hope she doesn’t mind but I decided I wanted to answer her questions here on my blog because I think they are important.</p>
<p>Her main question was: “What do developers really want out of professional opportunities that they might not be getting with their current employers? To put it another way, what are the things that entice you guys?”</p>
<p>That’s an interesting question. What DO we want? Why do some employers have a bad rap in town while others seem to have their pick of the top developers?</p>
<p>First off I want to dispel one myth. The recruiter followed her question up with “My inclination is that money is a secondary factor when seeking out new grounds for professional growth”. Yes and no. Money is not the ONLY factor but it certainly is a large factor and it can easily disqualify an employer from a job search. Especially for the top talent in town who may be accustomed to a certain lifestyle. We all live in this same economy. We have families and children we want to send to college. We want to take that trip to New Zealand. We want a nice home. Money is a factor. Your job as an employer is to make sure that it’s not a negative when I’m considering you. It’s quite insulting and sad when you meet someone who thinks a beer fridge and a foosball table somehow makes up for low salaries. It doesn’t.</p>
<p>That said, while pay is a factor for why we might NOT take a job it’s not an indicator of why I might take a job, or stay at a job. As long as the pay is in a competitive range the other factors come to the front. So what are those factors?</p>
<ol>
<li>
<p>“Self-Determination”. People want to feel like they are contributing to solutions. They want to bring value to their clients. The absolute last thing they want is to feel like some cog responsible for implementing someone else's design. This is why top-down architecture is so detrimental to good teams. I want some amount of influence over the design, the architecture, and the tools. I want to feel like when I come to work people want me to be there because they value my contributions, opinions and the code I write. Most importantly, if something is in my way, or is inefficient, and I have a better way to solve it, I want the power to solve it. Nothing is more frustrating than being told. “Yea, we know it sucks, but we have to do it that way because [corporate policy, Joffrey the “Architect” said so, we always did it that way, derp].”</p>
</li>
<li>
<p>Customer feedback: I want to know that the work I’m doing matters. Make sure developers have the opportunity to interact with customers, even if that is part of market research or trade conferences. Ideally I want constant feedback from a product owner who works with the development staff every day and makes sure we are working on the right things.</p>
</li>
<li>
<p>A cool project with cool technologies: As developers we like cool things and cool toys. I realize sometimes you’re an insurance company and there is little you can do to make your app more exciting. That just means you need to get creative. Sorry but nobody wants to work on a legacy struts app running on Websphere.</p>
</li>
<li>
<p>XP: I can’t speak for everyone on this but I think I speak for a growing majority. I will not consider a job where XP practices are not followed and embraced. Particularly BDD/TDD and CI. I’m also cool if you’re not there yet and you want me to help you get there. Just don’t be wishy washy about it. XP is the one exception to rule #1. Everyone needs to get on board. We are professionals, act like it and take your craft seriously.</p>
</li>
</ol>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Java 8 Lambda Expressions]]></title>
            <link href="/blog/2013/09/03/java-8-lambda-expressions/"/>
            <updated>&lt;p&gt;Here is the deck from tonights Java 8 lambda expression presentation at &lt;a href&#61;&quot;http://cijug.net/meeting/2013/08/26/september-meeting/&quot;&gt;CIJUG&lt;/a&gt; meeting. Also &lt;a href&#61;&quot;https://github.com/ryber/J8Lambda&quot;&gt;here is the code on GitHub.&lt;/a&gt;&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/1YNzJQzEgNswN3420OsVIXn-xYZtnR5M7jrcHfR65dog/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;389&quot;  allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2013/09/03/java-8-lambda-expressions/</id>
            <content type="html"><![CDATA[<p>Here is the deck from tonights Java 8 lambda expression presentation at <a href="http://cijug.net/meeting/2013/08/26/september-meeting/">CIJUG</a> meeting. Also <a href="https://github.com/ryber/J8Lambda">here is the code on GitHub.</a></p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/1YNzJQzEgNswN3420OsVIXn-xYZtnR5M7jrcHfR65dog/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="389"  allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[ATDD vs xUnit Frameworks]]></title>
            <link href="/blog/2013/08/27/atdd-vs-xunit-frameworks/"/>
            <updated>&lt;p&gt;I’ve been in many debates about if acceptance testing should be done in a unit test framework or a “proper” ATDD tool like Cucumber or Fitnesse. Developers will change a unit test to do what they want in a heartbeat. They are more reluctant to change an acceptance test where the criteria is separated from the code. This is a very important distinction. I think a lot of developers think of unit tests as belonging to “them” and acceptance tests as belonging to “the business”.&lt;/p&gt;&#10;&lt;p&gt;So yes, those test frameworks do suck, but they give you something that unit test frameworks just aren’t designed for. Whenever I see “acceptance tests” written in a unit test framework they just look like really poorly written unit tests, So take the extra time and use the right tool for the right job.&lt;/p&gt;&#10;&lt;p&gt;I have seen one exception to this. At Agile 2012 I attended a talk from &lt;a href&#61;&quot;https://twitter.com/lunivore&quot;&gt;Liz Keogh&lt;/a&gt; about &lt;a href&#61;&quot;http://agile2012.sched.org/event/e459c95d5ffa604772181091d142cb22&quot;&gt;writing BDD tests in a domain specific syntax from within a unit test framework&lt;/a&gt;. I thought it was a excellent idea and I have used the style on my own personal projects. I want to emphasize that what Liz has done is not entirely dissimilar to traditional ATDD frameworks. Her data, and criteria are absolutely separate from the underlying code. Even going so far as to abstract away top level controllers and domain objects behind fixtures.&lt;/p&gt;&#10;&lt;p&gt;Here is an example of the &amp;quot;Keogh Style&amp;quot; testing from the unit test class. Note that those are all static methods of an external fixture class. In many ways it is no different than the text file side of Cucumber. All of the work of dealing with the underlying classes is behind the fixture leaving the jUnit methods with nothing but simple asserts.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;@Test&#10;public void canCountRegistrations() {&#10;    givenCourse(&amp;quot;abc&amp;quot;, &amp;quot;Underwater Basketweaving&amp;quot;);&#10;&#10;    registerUserForCourse(&amp;quot;abc&amp;quot;, &amp;quot;barry&amp;quot;);&#10;    registerUserForCourse(&amp;quot;abc&amp;quot;, &amp;quot;gary&amp;quot;);&#10;&#10;    assertEquals(2, getRegistrationCount(&amp;quot;abc&amp;quot;));&#10;&#10;    registerUserForCourse(&amp;quot;abc&amp;quot;, &amp;quot;larry&amp;quot;);&#10;    registerUserForCourse(&amp;quot;abc&amp;quot;, &amp;quot;larry&amp;quot;);&#10;&#10;    assertEquals(3, getRegistrationCount(&amp;quot;abc&amp;quot;));&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;You can find more examples in &lt;a href&#61;&quot;https://github.com/ryber/Halleck/blob/master/src/test/java/BDDTests/RegistrationTests.java&quot;&gt;this project&lt;/a&gt;.&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/08/27/atdd-vs-xunit-frameworks/</id>
            <content type="html"><![CDATA[<p>I’ve been in many debates about if acceptance testing should be done in a unit test framework or a “proper” ATDD tool like Cucumber or Fitnesse. Developers will change a unit test to do what they want in a heartbeat. They are more reluctant to change an acceptance test where the criteria is separated from the code. This is a very important distinction. I think a lot of developers think of unit tests as belonging to “them” and acceptance tests as belonging to “the business”.</p>
<p>So yes, those test frameworks do suck, but they give you something that unit test frameworks just aren’t designed for. Whenever I see “acceptance tests” written in a unit test framework they just look like really poorly written unit tests, So take the extra time and use the right tool for the right job.</p>
<p>I have seen one exception to this. At Agile 2012 I attended a talk from <a href="https://twitter.com/lunivore">Liz Keogh</a> about <a href="http://agile2012.sched.org/event/e459c95d5ffa604772181091d142cb22">writing BDD tests in a domain specific syntax from within a unit test framework</a>. I thought it was a excellent idea and I have used the style on my own personal projects. I want to emphasize that what Liz has done is not entirely dissimilar to traditional ATDD frameworks. Her data, and criteria are absolutely separate from the underlying code. Even going so far as to abstract away top level controllers and domain objects behind fixtures.</p>
<p>Here is an example of the &quot;Keogh Style&quot; testing from the unit test class. Note that those are all static methods of an external fixture class. In many ways it is no different than the text file side of Cucumber. All of the work of dealing with the underlying classes is behind the fixture leaving the jUnit methods with nothing but simple asserts.</p>
<pre><code>@Test
public void canCountRegistrations() {
    givenCourse(&quot;abc&quot;, &quot;Underwater Basketweaving&quot;);

    registerUserForCourse(&quot;abc&quot;, &quot;barry&quot;);
    registerUserForCourse(&quot;abc&quot;, &quot;gary&quot;);

    assertEquals(2, getRegistrationCount(&quot;abc&quot;));

    registerUserForCourse(&quot;abc&quot;, &quot;larry&quot;);
    registerUserForCourse(&quot;abc&quot;, &quot;larry&quot;);

    assertEquals(3, getRegistrationCount(&quot;abc&quot;));
}
</code></pre>
<p>You can find more examples in <a href="https://github.com/ryber/Halleck/blob/master/src/test/java/BDDTests/RegistrationTests.java">this project</a>.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Joda Time Presentation]]></title>
            <link href="/blog/2013/07/20/joda-time-presentation/"/>
            <updated>&lt;p&gt;Recently I did a little presentation on Joda Time after converting a codebase to use it. Here is the deck:&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/1u9-BQ-gGJiNBYz55dUw2gRf1pUqO5b-CutWPPe0W17w/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;389&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2013/07/20/joda-time-presentation/</id>
            <content type="html"><![CDATA[<p>Recently I did a little presentation on Joda Time after converting a codebase to use it. Here is the deck:</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/1u9-BQ-gGJiNBYz55dUw2gRf1pUqO5b-CutWPPe0W17w/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Hacking For Health]]></title>
            <link href="/blog/2013/07/04/hacking-for-health/"/>
            <updated>&lt;p&gt;Lately quite a lot of people have been asking me about my weight. I lost over 35 lbs in about 4 months and I’ve been a little surprised at how many people have thought it was a big deal and wanted details on my plan. I don’t think anything I&#39;ve done is extreme or weird. It’s mostly just lifestyle changes. I told a few people I would blog the specifics so here it is.&lt;/p&gt;&#10;&lt;h2&gt;Impetus&lt;/h2&gt;&#10;&lt;p&gt;6 months ago my father passed away from a sudden heart attack. While it was a shock, it was not surprising given his lifestyle choices. I decided that I couldn’t change my genetics so whatever else happens, I was not going to contribute to an early death the way my dad did. I didn&#39;t go into this specifically to lose weight, I did it for a healthy life and losing weight has been a side effect of that.&lt;/p&gt;&#10;&lt;h2&gt;Work&lt;/h2&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/sitnstand.jpg&quot; align&#61;&quot;right&quot; alt&#61;&quot;My sit-n-stand desk&quot; /&gt;I’m a computer programmer. Not exactly the kid of job that encourages a healthy lifestyle. So I came up with a few rules:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;Don’t sit for more than 20 minutes. After that you have to go do something or at least change position.&lt;/li&gt;&#10;&lt;li&gt;If you need to use more than 1 sentence to answer a email and the person is within walking distance then go visit them. Email sucks as a communication tool anyway.&lt;/li&gt;&#10;&lt;li&gt;If you’re stuck on a problem go for a walk. Sometimes just getting the blood going helps you think of the answer.&lt;/li&gt;&#10;&lt;li&gt;At my office we have sit-n-stand desks. I highly recommend these. if you don’t have them available, start talking about it with your boss because &lt;a href&#61;&quot;http://www.mayoclinic.com/health/sitting/AN02082&quot;&gt;sitting can kill you&lt;/a&gt;. I probably stand at least half the day. Also, when your tired, sit down, because standing too much can kill you too.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h2&gt;Exercise&lt;/h2&gt;&#10;&lt;p&gt;I “work out” 30 minutes a day, &lt;em&gt;every day&lt;/em&gt;. “Working out” can be defined as pretty much any physical activity that raises the heart rate. So a long afternoon of yard work counts. When I was in the middle of dropping weight, rather than just maintaining like I do now, I was doing 60 minutes a day broken into two 30 minute chunks.&lt;/p&gt;&#10;&lt;p&gt;The most important part of this was at night. My old ritual was to put the kids to bed and then have a big glass of wine (or two) with my ass on the couch. That’s a lot of calories to consume and then sleep on. My new ritual was to cut out the nighttime wine (I still have a glass with dinner), and to not eat anything within 3 hours of bed. I started out riding an exercise bike after the kids went down. The bike has some nice variety of 30 minute programs which I could do while watching Dr. Who.&lt;/p&gt;&#10;&lt;p&gt;I also joined a gym. I picked a &lt;a href&#61;&quot;http://www.planetfitness.com/gyms/IA/Urbandale&quot;&gt;Planet Fitness that’s close to my work&lt;/a&gt;. It’s super cheap at only $10 a month. I go there for a quick 30 minute work out before lunch or in the morning. They have this thing called &lt;a href&#61;&quot;http://www.cybexintl.com/products/arc-trainers.aspx&quot;&gt;“The Arc”&lt;/a&gt; which became my favorite. I also do strength training. You can burn more calories with more muscle mass so don’t skimp on the weights and do nothing but cardio.&lt;/p&gt;&#10;&lt;p&gt;Keep in mind I’m not planning on doing a marathon or anything. I’m not pushing my body to it’s limits on this stuff most of the time. I’m just raising my heat rate to a point and getting a good sweat going. That’s all it has to be. Make it a part of your life, like brushing your teeth.&lt;/p&gt;&#10;&lt;h2&gt;Diet&lt;/h2&gt;&#10;&lt;p&gt;I have not been following any particular diet. I kind of pick and choose what I want. The main goal has been to simply make healthy choices and do so all the time. If there has been one diet that I’ve followed more than any other it would be the &lt;a href&#61;&quot;http://www.mayoclinic.com/health/mediterranean-diet/CL00011&quot;&gt;“mediterranean diet”&lt;/a&gt;. This is pretty easy for me because I love greek and middle eastern food. I also allow myself to eat as many raw fruits and vegetables as I want. You can’t get fat on raw apples...trust me. Here are some of the guidelines:&lt;/p&gt;&#10;&lt;h3&gt;Things that are “out”&lt;/h3&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;Large Portions&lt;/em&gt;: I think this is the biggest thing. American portions are huge. A good rule is, don&#39;t ever go back for seconds. If you&#39;re still hungry after the first then eat an Apple or some other raw fruit or vegetable.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Meat:&lt;/em&gt; I’m pretty much a vegetarian (often vegan) before dinner. Even then we probably only eat meat 2-3 times a week and red meat is even more rare.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Carbs:&lt;/em&gt; I’ve swapped out american bread for whole grain tortillas, pita bread and flat breads.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Potatoes:&lt;/em&gt; This used to be a staple of our diet. Now we eat them rarely.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Ice Cream:&lt;/em&gt; nope. Well, maybe a spoonful when I give the kids some.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Cheese:&lt;/em&gt; drastically cut back and eating more low fat and fresh cheeses than things like cheddar.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Fried food:&lt;/em&gt; Get a good grill instead.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Pop:&lt;/em&gt; If there was just one thing I would tell you to quit entirely it’s pop/soda/coke. It has zero nutritional benefit. The diet crap is no better for you...actually it’s probably worse. Just quit it all together, you’ll feel better.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Crap in your coffee:&lt;/em&gt; same as pop.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Cakes &amp;amp; Candy:&lt;/em&gt; hey if your going to your niece&#39;s birthday party, go ahead and have some cake. If you&#39;re at the grocery store and eyeing the zingers, then cut that shit out.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h3&gt;Things that are “in”&lt;/h3&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;Breakfast:&lt;/em&gt; It’s very important to get your metabolism moving in the morning. I have a bowl of regular Cheerios with some blueberries or a banana.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Hummus:&lt;/em&gt;  I freakin love this stuff. Make or buy it made with olive oil.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Greek Yogurt:&lt;/em&gt; Get the good stuff like &lt;a href&#61;&quot;http://chobani.com/goreal/&quot;&gt;Chobani&lt;/a&gt;. It’s 0% fat, 0% cholesterol, almost pure protein and is indistinguishable from a stiff sour cream. You can use it in cooking to replace all kinds of stuff like sour cream, heavy cream or mayonnaise. The fruit versions are great for lunch or breakfast and the kids love it.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Nuts:&lt;/em&gt; You do still need fat to live and nuts are a great source of good fats. Peanut butter is a must but also just raw nuts. Planters makes a good snack pack of “heart healthy” nuts you can get.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Raw Fruits and Vegetables:&lt;/em&gt; You should eat some at every meal. We go through apples by the sack. We also eat a ton of pears, baby carrots, and celery. Your system needs lots of fiber and this is where you should get it.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Avocados:&lt;/em&gt; Another great source of “good fats” and all kind of other good things for you. I’ll eat them raw, made into guacamole and eaten with pita bread or tortillas, or on top of pizza or salad.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;em&gt;A note on buying fruits and vegetables:&lt;/em&gt; We have four kids and with this diet we go through a lot of produce. If we were shopping at the regular grocery store we would go broke quickly. I highly suggest that if you want to do this to go join someplace like Costco or Sam&#39;s Club. You can get a lot of produce for not much money.&lt;/p&gt;&#10;&lt;p&gt;Good Luck!&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/07/04/hacking-for-health/</id>
            <content type="html"><![CDATA[<p>Lately quite a lot of people have been asking me about my weight. I lost over 35 lbs in about 4 months and I’ve been a little surprised at how many people have thought it was a big deal and wanted details on my plan. I don’t think anything I've done is extreme or weird. It’s mostly just lifestyle changes. I told a few people I would blog the specifics so here it is.</p>
<h2>Impetus</h2>
<p>6 months ago my father passed away from a sudden heart attack. While it was a shock, it was not surprising given his lifestyle choices. I decided that I couldn’t change my genetics so whatever else happens, I was not going to contribute to an early death the way my dad did. I didn't go into this specifically to lose weight, I did it for a healthy life and losing weight has been a side effect of that.</p>
<h2>Work</h2>
<p><img src="/assets/images/sitnstand.jpg" align="right" alt="My sit-n-stand desk" />I’m a computer programmer. Not exactly the kid of job that encourages a healthy lifestyle. So I came up with a few rules:</p>
<ul>
<li>Don’t sit for more than 20 minutes. After that you have to go do something or at least change position.</li>
<li>If you need to use more than 1 sentence to answer a email and the person is within walking distance then go visit them. Email sucks as a communication tool anyway.</li>
<li>If you’re stuck on a problem go for a walk. Sometimes just getting the blood going helps you think of the answer.</li>
<li>At my office we have sit-n-stand desks. I highly recommend these. if you don’t have them available, start talking about it with your boss because <a href="http://www.mayoclinic.com/health/sitting/AN02082">sitting can kill you</a>. I probably stand at least half the day. Also, when your tired, sit down, because standing too much can kill you too.</li>
</ul>
<h2>Exercise</h2>
<p>I “work out” 30 minutes a day, <em>every day</em>. “Working out” can be defined as pretty much any physical activity that raises the heart rate. So a long afternoon of yard work counts. When I was in the middle of dropping weight, rather than just maintaining like I do now, I was doing 60 minutes a day broken into two 30 minute chunks.</p>
<p>The most important part of this was at night. My old ritual was to put the kids to bed and then have a big glass of wine (or two) with my ass on the couch. That’s a lot of calories to consume and then sleep on. My new ritual was to cut out the nighttime wine (I still have a glass with dinner), and to not eat anything within 3 hours of bed. I started out riding an exercise bike after the kids went down. The bike has some nice variety of 30 minute programs which I could do while watching Dr. Who.</p>
<p>I also joined a gym. I picked a <a href="http://www.planetfitness.com/gyms/IA/Urbandale">Planet Fitness that’s close to my work</a>. It’s super cheap at only $10 a month. I go there for a quick 30 minute work out before lunch or in the morning. They have this thing called <a href="http://www.cybexintl.com/products/arc-trainers.aspx">“The Arc”</a> which became my favorite. I also do strength training. You can burn more calories with more muscle mass so don’t skimp on the weights and do nothing but cardio.</p>
<p>Keep in mind I’m not planning on doing a marathon or anything. I’m not pushing my body to it’s limits on this stuff most of the time. I’m just raising my heat rate to a point and getting a good sweat going. That’s all it has to be. Make it a part of your life, like brushing your teeth.</p>
<h2>Diet</h2>
<p>I have not been following any particular diet. I kind of pick and choose what I want. The main goal has been to simply make healthy choices and do so all the time. If there has been one diet that I’ve followed more than any other it would be the <a href="http://www.mayoclinic.com/health/mediterranean-diet/CL00011">“mediterranean diet”</a>. This is pretty easy for me because I love greek and middle eastern food. I also allow myself to eat as many raw fruits and vegetables as I want. You can’t get fat on raw apples...trust me. Here are some of the guidelines:</p>
<h3>Things that are “out”</h3>
<ul>
<li><em>Large Portions</em>: I think this is the biggest thing. American portions are huge. A good rule is, don't ever go back for seconds. If you're still hungry after the first then eat an Apple or some other raw fruit or vegetable.</li>
<li><em>Meat:</em> I’m pretty much a vegetarian (often vegan) before dinner. Even then we probably only eat meat 2-3 times a week and red meat is even more rare.</li>
<li><em>Carbs:</em> I’ve swapped out american bread for whole grain tortillas, pita bread and flat breads.</li>
<li><em>Potatoes:</em> This used to be a staple of our diet. Now we eat them rarely.</li>
<li><em>Ice Cream:</em> nope. Well, maybe a spoonful when I give the kids some.</li>
<li><em>Cheese:</em> drastically cut back and eating more low fat and fresh cheeses than things like cheddar.</li>
<li><em>Fried food:</em> Get a good grill instead.</li>
<li><em>Pop:</em> If there was just one thing I would tell you to quit entirely it’s pop/soda/coke. It has zero nutritional benefit. The diet crap is no better for you...actually it’s probably worse. Just quit it all together, you’ll feel better.</li>
<li><em>Crap in your coffee:</em> same as pop.</li>
<li><em>Cakes &amp; Candy:</em> hey if your going to your niece's birthday party, go ahead and have some cake. If you're at the grocery store and eyeing the zingers, then cut that shit out.</li>
</ul>
<h3>Things that are “in”</h3>
<ul>
<li><em>Breakfast:</em> It’s very important to get your metabolism moving in the morning. I have a bowl of regular Cheerios with some blueberries or a banana.</li>
<li><em>Hummus:</em>  I freakin love this stuff. Make or buy it made with olive oil.</li>
<li><em>Greek Yogurt:</em> Get the good stuff like <a href="http://chobani.com/goreal/">Chobani</a>. It’s 0% fat, 0% cholesterol, almost pure protein and is indistinguishable from a stiff sour cream. You can use it in cooking to replace all kinds of stuff like sour cream, heavy cream or mayonnaise. The fruit versions are great for lunch or breakfast and the kids love it.</li>
<li><em>Nuts:</em> You do still need fat to live and nuts are a great source of good fats. Peanut butter is a must but also just raw nuts. Planters makes a good snack pack of “heart healthy” nuts you can get.</li>
<li><em>Raw Fruits and Vegetables:</em> You should eat some at every meal. We go through apples by the sack. We also eat a ton of pears, baby carrots, and celery. Your system needs lots of fiber and this is where you should get it.</li>
<li><em>Avocados:</em> Another great source of “good fats” and all kind of other good things for you. I’ll eat them raw, made into guacamole and eaten with pita bread or tortillas, or on top of pizza or salad.</li>
</ul>
<p><em>A note on buying fruits and vegetables:</em> We have four kids and with this diet we go through a lot of produce. If we were shopping at the regular grocery store we would go broke quickly. I highly suggest that if you want to do this to go join someplace like Costco or Sam's Club. You can get a lot of produce for not much money.</p>
<p>Good Luck!</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Color Themes Under Glare]]></title>
            <link href="/blog/2013/05/15/color-themes-under-glare/"/>
            <updated>&lt;p&gt;There was a spirited discussion today about the effect of bright light glare on application color themes. A lot of discussion about solorization and saturations and such. My point in the discussion was that all of that is irrelevant because the main factor is not the sun on the colors. It&#39;s the color&#39;s impact on the glass screens reflection of the light. Dark themes turn screens into mirrors. Ever noticed that you can see your face reflecting back at you in a dark screen but not a light one? Well the same happens with the sun.&lt;/p&gt;&#10;&lt;p&gt;Here is my unscientific experiment. Same screen with Intellij put into a dark and light screen and angled such that a light is reflecting back at the camera:&lt;/p&gt;&#10;&lt;h3&gt;Dark&lt;/h3&gt;&#10;&lt;img src&#61;&quot;/assets/images/dark_glare.jpg&quot; alt&#61;&quot;dark theme&quot; /&gt; &#10;&lt;h3&gt;Light&lt;/h3&gt;&#10;&lt;img src&#61;&quot;/assets/images/light_glare.jpg&quot; alt&#61;&quot;dark theme&quot; /&gt;&#10;</updated>
            <id>/blog/2013/05/15/color-themes-under-glare/</id>
            <content type="html"><![CDATA[<p>There was a spirited discussion today about the effect of bright light glare on application color themes. A lot of discussion about solorization and saturations and such. My point in the discussion was that all of that is irrelevant because the main factor is not the sun on the colors. It's the color's impact on the glass screens reflection of the light. Dark themes turn screens into mirrors. Ever noticed that you can see your face reflecting back at you in a dark screen but not a light one? Well the same happens with the sun.</p>
<p>Here is my unscientific experiment. Same screen with Intellij put into a dark and light screen and angled such that a light is reflecting back at the camera:</p>
<h3>Dark</h3>
<img src="/assets/images/dark_glare.jpg" alt="dark theme" /> 
<h3>Light</h3>
<img src="/assets/images/light_glare.jpg" alt="dark theme" />
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Partial Class Syndrome]]></title>
            <link href="/blog/2013/05/13/partial-class-syndrome/"/>
            <updated>&lt;p&gt;The other day I ran into a smelly code scenario. Not only was it smelly, it was eerily familiar. I&#39;ve run into this several times in this particular codebase and I finally put a name on it. &amp;quot;Partial Class Syndrome&amp;quot;.&lt;/p&gt;&#10;&lt;p&gt;Now anyone familiar with C# knows that you can split one class over several different files by using the &lt;a href&#61;&quot;http://msdn.microsoft.com/en-us/library/wa80x488(v&#61;vs.80).aspx&quot; &gt;partial&lt;/a&gt; keyword. It&#39;s really a pretty horrible thing to do there is a very very limited scope for it being a good idea. Generated code like web service stubs are often partial so you can add to them without extending them. Other than that partials are super crappy. They make code hard to read and understand and they encourage classes to get way too big. In fact a partial sometimes shows up in code when a class gets so big that people want a quick and dirty way to make it &lt;em&gt;look&lt;/em&gt; smaller.&lt;/p&gt;&#10;&lt;img src&#61;&quot;http://upload.wikimedia.org/wikipedia/en/b/b8/Three_Stooges_Intro_Card_1936.jpg&quot; alt&#61;&quot;The Boys&quot; /&gt;&#10;&lt;p&gt;Anyway this project is Java and so can&#39;t do partials. At least you would hope not. Yet there I was looking at three classes. We can call them Larry, Moe and Curly. These three were all basically the same class with some different methods. They had the same dependencies, they took and returned the same classes, did similar things and even had similar names. On top of that they were all held by a big model class that used them interchangeably calling one and passing it&#39;s data into the others.&lt;/p&gt;&#10;&lt;p&gt;So here I was working in Moe and finding that I needed the functionality of Curly. I was also getting confused about which class did what due to the similarity.&lt;/p&gt;&#10;&lt;p&gt;The &amp;quot;fix&amp;quot; of course was to:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;Merge them together. This resulted in a pretty huge class which I was uncomfortable with but at least it solved the ambiguous confusion.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;Simplify the model&#39;s use of the code to just let the new big class handle the back and forth with it&#39;s own methods. This actually resulted in a lot of methods being removed or made private.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&#10;&lt;p&gt;Extract smaller specialty classes that deal with unique things. I&#39;m still doing this step. This is always the hard part but if you look carefully you can find the classes hidden in there. Pay particular attention to feature envy.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;I ended up with a single class that is smaller than the three from before and something that&#39;s easier to read and understand. It’s still too big for my taste but It’s better than what was there before...at least for now.&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/05/13/partial-class-syndrome/</id>
            <content type="html"><![CDATA[<p>The other day I ran into a smelly code scenario. Not only was it smelly, it was eerily familiar. I've run into this several times in this particular codebase and I finally put a name on it. &quot;Partial Class Syndrome&quot;.</p>
<p>Now anyone familiar with C# knows that you can split one class over several different files by using the <a href="http://msdn.microsoft.com/en-us/library/wa80x488(v=vs.80).aspx" >partial</a> keyword. It's really a pretty horrible thing to do there is a very very limited scope for it being a good idea. Generated code like web service stubs are often partial so you can add to them without extending them. Other than that partials are super crappy. They make code hard to read and understand and they encourage classes to get way too big. In fact a partial sometimes shows up in code when a class gets so big that people want a quick and dirty way to make it <em>look</em> smaller.</p>
<img src="http://upload.wikimedia.org/wikipedia/en/b/b8/Three_Stooges_Intro_Card_1936.jpg" alt="The Boys" />
<p>Anyway this project is Java and so can't do partials. At least you would hope not. Yet there I was looking at three classes. We can call them Larry, Moe and Curly. These three were all basically the same class with some different methods. They had the same dependencies, they took and returned the same classes, did similar things and even had similar names. On top of that they were all held by a big model class that used them interchangeably calling one and passing it's data into the others.</p>
<p>So here I was working in Moe and finding that I needed the functionality of Curly. I was also getting confused about which class did what due to the similarity.</p>
<p>The &quot;fix&quot; of course was to:</p>
<ol>
<li>
<p>Merge them together. This resulted in a pretty huge class which I was uncomfortable with but at least it solved the ambiguous confusion.</p>
</li>
<li>
<p>Simplify the model's use of the code to just let the new big class handle the back and forth with it's own methods. This actually resulted in a lot of methods being removed or made private.</p>
</li>
<li>
<p>Extract smaller specialty classes that deal with unique things. I'm still doing this step. This is always the hard part but if you look carefully you can find the classes hidden in there. Pay particular attention to feature envy.</p>
</li>
</ol>
<p>I ended up with a single class that is smaller than the three from before and something that's easier to read and understand. It’s still too big for my taste but It’s better than what was there before...at least for now.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Embracing Nihilism as a Software Development Philosophy]]></title>
            <link href="/blog/2013/04/17/embracing-nihilism-as-a-software-development-philosophy/"/>
            <updated>&lt;p&gt;Here is the deck from my Agile 2012 Presentation on the dangers of dead code. Enjoy.&lt;/p&gt;&#10;&lt;div class&#61;&quot;videoWrapper&quot;&gt;&#10;&lt;iframe src&#61;&quot;https://docs.google.com/presentation/d/1JI09CxuAflhf_FBLCVpnQsgJA_HWA6k0hnQsjxU0lhE/embed?start&#61;false&amp;loop&#61;false&amp;delayms&#61;3000&quot; frameborder&#61;&quot;0&quot; width&#61;&quot;480&quot; height&#61;&quot;389&quot; allowfullscreen&#61;&quot;true&quot; mozallowfullscreen&#61;&quot;true&quot; webkitallowfullscreen&#61;&quot;true&quot;&gt;&lt;/iframe&gt;&#10;&lt;/div&gt;&#10;</updated>
            <id>/blog/2013/04/17/embracing-nihilism-as-a-software-development-philosophy/</id>
            <content type="html"><![CDATA[<p>Here is the deck from my Agile 2012 Presentation on the dangers of dead code. Enjoy.</p>
<div class="videoWrapper">
<iframe src="https://docs.google.com/presentation/d/1JI09CxuAflhf_FBLCVpnQsgJA_HWA6k0hnQsjxU0lhE/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</div>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[The Rise Of Node.Tcl]]></title>
            <link href="/blog/2013/03/15/the-rise-of-node-dot-tcl/"/>
            <updated>&lt;p&gt;Back in the 90’s when Netscape was trying to figure out how to add scripting to HTML a lot of things were considered including Java, Python, Tcl and Perl. Eventually Brendan Eich created JavaScript in 10 days and the rest is history.&lt;/p&gt;&#10;&lt;p&gt;But what if it had played out differently? In the early running Tcl was a favorite but was ruled out for not being “Javaish” enough. What if it had been picked? I imagine we would be in about the same situation we are today. It would have been dismissed in the early days as underpowered and slow. Then as browsers became faster and tools like “tclQuery” became more robust it would have gained in popularity. Eventually as the Stockholm syndrome set in someone would extract Google’s Tcl engine into a server side platform and hipsters everywhere would form start-ups using “Node.Tcl”.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/nodetcl.png&quot; alt&#61;&quot;Node.Tcl&quot; /&gt; &lt;br /&gt;&lt;/p&gt;&#10;&lt;p&gt;JavaScript didn’t get where it is today because it’s a great language. It got here because it was the only choice. If browsers had ever had the ability to natively and universally run something else as a first class language things might be different today. Will we ever have the opportunity to use anything else? I’m not sure, legacy browsers are a harsh mistress.  I do look forward to Ecmascript 6. Here’s hoping it’s not another 10 years before I can safely use it.&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/03/15/the-rise-of-node-dot-tcl/</id>
            <content type="html"><![CDATA[<p>Back in the 90’s when Netscape was trying to figure out how to add scripting to HTML a lot of things were considered including Java, Python, Tcl and Perl. Eventually Brendan Eich created JavaScript in 10 days and the rest is history.</p>
<p>But what if it had played out differently? In the early running Tcl was a favorite but was ruled out for not being “Javaish” enough. What if it had been picked? I imagine we would be in about the same situation we are today. It would have been dismissed in the early days as underpowered and slow. Then as browsers became faster and tools like “tclQuery” became more robust it would have gained in popularity. Eventually as the Stockholm syndrome set in someone would extract Google’s Tcl engine into a server side platform and hipsters everywhere would form start-ups using “Node.Tcl”.</p>
<p><img src="/assets/images/nodetcl.png" alt="Node.Tcl" /> <br /></p>
<p>JavaScript didn’t get where it is today because it’s a great language. It got here because it was the only choice. If browsers had ever had the ability to natively and universally run something else as a first class language things might be different today. Will we ever have the opportunity to use anything else? I’m not sure, legacy browsers are a harsh mistress.  I do look forward to Ecmascript 6. Here’s hoping it’s not another 10 years before I can safely use it.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Migrating Jekyll Bootstrap to Octopress]]></title>
            <link href="/blog/2013/03/02/migrating-jekyll-bootstrap-to-octopress/"/>
            <updated>&lt;p&gt;Even though Octopres uses Jekyll for generating pages it&#39;s layout and the way they expect you to use it with Github Pages is actually quite different. This is my recipe for migrating:&lt;/p&gt;&#10;&lt;h3&gt;Layout Overview&lt;/h3&gt;&#10;&lt;p&gt;Now with Jekyll-Bootstrap your directory structure probably looks something like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Hal9000:ryber.github.com ryber$ ls&#10;404.html&#9;_includes&#9;archive.html&#9;changelog.md&#9;sitemap.txt&#10;README.md&#9;_layouts&#9;assets&#9;&#9;index.md&#9;tags.html&#10;Rakefile&#9;_plugins&#9;atom.xml&#9;pages.html&#10;_config.yml&#9;_posts&#9;&#9;categories.html&#9;rss.xml&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Your site and the Jekyll code are interwoven. You probably have it all on one branch, and when you push you push the entire thing.&lt;/p&gt;&#10;&lt;p&gt;This is not the case with the standard Octopress layout. It looks more like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Hal9000:ryber.github.com ryber$ ls&#10;CHANGELOG.markdown&#9;_config.yml&#9;&#9;public&#10;Gemfile&#9;&#9;&#9;  &#9;_deploy&#9;&#9;&#9;sass&#10;config.rb&#9;&#9;    source&#10;README.markdown&#9;&#9;config.ru&#10;Rakefile&#9;&#9;&#9;plugins&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Everything you see here with the exception of the &lt;code&gt;_deploy&lt;/code&gt; folder (which is listed in the &lt;code&gt;.gitignore&lt;/code&gt; will be kept on a &lt;code&gt;source&lt;/code&gt; branch in git. The contents of the &lt;code&gt;_deploy&lt;/code&gt; folder will be your production branch. Almost all of your work will go into the &lt;code&gt;source&lt;/code&gt; folder.&lt;/p&gt;&#10;&lt;p&gt;In order to get to the right state we are going to be a little sneaky as we move things around.&lt;/p&gt;&#10;&lt;h2&gt;Pre-reqs&lt;/h2&gt;&#10;&lt;p&gt;You will need at least version 1.9.3 of ruby. If you don&#39;t have it yet I suggest &lt;a href&#61;&quot;https://rvm.io/rvm/install/&quot;&gt;installing RVM&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;After installing make sure you have 1.9.3 like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;rvm install 1.9.3&#10;rvm use 1.9.3&#10;rvm rubygems latest&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;The old switcheroo&lt;/h2&gt;&#10;&lt;p&gt;OK, so what we need to do now in order to get everything into the right place is to move the &amp;quot;main&amp;quot; directory into a branch and keep the master in a subdirectory.&lt;/p&gt;&#10;&lt;p&gt;So first make a backup copy of our current state. and then go into the original.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;cp -r ryber.github.com/ old.ryber.github.com&#10;cd ryber.github.com&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;next we need to make a &lt;code&gt;source&lt;/code&gt; branch where our Jekyll is going to live. After doing that delete all of the content from the branch.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;git checkout -b source&#10;Switched to a new branch &#39;source&#39;&#10;&#10;git rm -r *&#10;git commit -m &amp;quot;clearned out everything from branch&amp;quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Next we are going to get the octopress content and copy it into our directory without the git history.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;cd ..&#10;git clone https://github.com/imathis/octopress.git octopress&#10;cd octopress&#10;git archive master | tar -x -C ../ryber.github.com &#10;cd ../ryber.github.com&#10;git add . &#10;git commit -m &amp;quot;added octopress content&amp;quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Now lets make sure we have a working octopress directory. When you CD&#39;d into the dir rvm probably asked you if you want to trust the rvmc file. Do so. Now set up the app:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;gem install bundler&#10;rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command&#10;bundle install&#10;rake install&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Now we are going to clone your original master branch into the &lt;code&gt;_deploy&lt;/code&gt; dir. Yes this is kind of weird. The outer directory will be on the &lt;code&gt;source&lt;/code&gt; branch and the &lt;code&gt;_deploy&lt;/code&gt; dir will be on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ryber/ryber.github.com.git _deploy&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Migrating content&lt;/h2&gt;&#10;&lt;p&gt;This is the hard part. Copy your content over from the &lt;code&gt;/_deploy&lt;/code&gt; directory to the &lt;code&gt;/source&lt;/code&gt; directory. This is not going to be an exact science. Take a look at what you&#39;ve got and migrate as neccessary. Your milage may vary.&lt;/p&gt;&#10;&lt;p&gt;You can probably get 90% of what you need with these two:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;cp _deploy/_posts source/posts&#10;cp _deploy/assets source/assets&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;The _config.yml file&lt;/h2&gt;&#10;&lt;p&gt;The two config files are a bit different. You can&#39;t just copy the boostrap file over so open them both and copy the individual settings over that you need.&lt;/p&gt;&#10;&lt;h2&gt;Preview&lt;/h2&gt;&#10;&lt;p&gt;Run the site and check it out. Make sure everything is what you want it to be. When you do a &lt;code&gt;preview&lt;/code&gt; Jekyll will place your files in the &lt;code&gt;public&lt;/code&gt; directory (which is also ignored by git)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;rake preview&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h2&gt;Final Steps&lt;/h2&gt;&#10;&lt;p&gt;Before you do this check the Octopress rake file and change the &lt;code&gt;deploy_default&lt;/code&gt; method to &amp;quot;push&amp;quot;. You will find it in a section at the top that looks like this;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;## -- Rsync Deploy config -- ##&#10;# Be sure your public key is listed in your server&#39;s ~/.ssh/authorized_keys file&#10;ssh_user       &#61; &amp;quot;user@domain.com&amp;quot;&#10;ssh_port       &#61; &amp;quot;22&amp;quot;&#10;document_root  &#61; &amp;quot;~/website.com/&amp;quot;&#10;rsync_delete   &#61; true&#10;rsync_args     &#61; &amp;quot;&amp;quot;  # Any extra arguments to pass to rsync&#10;deploy_default &#61; &amp;quot;push&amp;quot; &#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Now we are going to replace your old site with the new site (at last!)&lt;/p&gt;&#10;&lt;p&gt;We need to clear out all of the files on the master branch to make way for the new content.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;cd _deploy&#10;git rm -r *&#10;git commit -m &amp;quot;cleaning house&amp;quot;&#10;cd ..&#10;rake deploy&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;When you do the deploy it&#39;s going to:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;generate the site and place the contents into the &lt;code&gt;_deploy&lt;/code&gt; directory (your master branch)&lt;/li&gt;&#10;&lt;li&gt;add and commit everything present to git&#39;s origin master.&lt;/li&gt;&#10;&lt;li&gt;push the master branch to github.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Last don&#39;t forget to push your source branch to github!&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;git push origin source&#10;&lt;/code&gt;&lt;/pre&gt;&#10;</updated>
            <id>/blog/2013/03/02/migrating-jekyll-bootstrap-to-octopress/</id>
            <content type="html"><![CDATA[<p>Even though Octopres uses Jekyll for generating pages it's layout and the way they expect you to use it with Github Pages is actually quite different. This is my recipe for migrating:</p>
<h3>Layout Overview</h3>
<p>Now with Jekyll-Bootstrap your directory structure probably looks something like this:</p>
<pre><code>Hal9000:ryber.github.com ryber$ ls
404.html	_includes	archive.html	changelog.md	sitemap.txt
README.md	_layouts	assets		index.md	tags.html
Rakefile	_plugins	atom.xml	pages.html
_config.yml	_posts		categories.html	rss.xml
</code></pre>
<p>Your site and the Jekyll code are interwoven. You probably have it all on one branch, and when you push you push the entire thing.</p>
<p>This is not the case with the standard Octopress layout. It looks more like this:</p>
<pre><code>Hal9000:ryber.github.com ryber$ ls
CHANGELOG.markdown	_config.yml		public
Gemfile			  	_deploy			sass
config.rb		    source
README.markdown		config.ru
Rakefile			plugins
</code></pre>
<p>Everything you see here with the exception of the <code>_deploy</code> folder (which is listed in the <code>.gitignore</code> will be kept on a <code>source</code> branch in git. The contents of the <code>_deploy</code> folder will be your production branch. Almost all of your work will go into the <code>source</code> folder.</p>
<p>In order to get to the right state we are going to be a little sneaky as we move things around.</p>
<h2>Pre-reqs</h2>
<p>You will need at least version 1.9.3 of ruby. If you don't have it yet I suggest <a href="https://rvm.io/rvm/install/">installing RVM</a>.</p>
<p>After installing make sure you have 1.9.3 like this:</p>
<pre><code>rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>
<h2>The old switcheroo</h2>
<p>OK, so what we need to do now in order to get everything into the right place is to move the &quot;main&quot; directory into a branch and keep the master in a subdirectory.</p>
<p>So first make a backup copy of our current state. and then go into the original.</p>
<pre><code>cp -r ryber.github.com/ old.ryber.github.com
cd ryber.github.com
</code></pre>
<p>next we need to make a <code>source</code> branch where our Jekyll is going to live. After doing that delete all of the content from the branch.</p>
<pre><code>git checkout -b source
Switched to a new branch 'source'

git rm -r *
git commit -m &quot;clearned out everything from branch&quot;
</code></pre>
<p>Next we are going to get the octopress content and copy it into our directory without the git history.</p>
<pre><code>cd ..
git clone https://github.com/imathis/octopress.git octopress
cd octopress
git archive master | tar -x -C ../ryber.github.com 
cd ../ryber.github.com
git add . 
git commit -m &quot;added octopress content&quot;
</code></pre>
<p>Now lets make sure we have a working octopress directory. When you CD'd into the dir rvm probably asked you if you want to trust the rvmc file. Do so. Now set up the app:</p>
<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
rake install
</code></pre>
<p>Now we are going to clone your original master branch into the <code>_deploy</code> dir. Yes this is kind of weird. The outer directory will be on the <code>source</code> branch and the <code>_deploy</code> dir will be on the <code>master</code> branch.</p>
<pre><code>git clone https://github.com/ryber/ryber.github.com.git _deploy
</code></pre>
<h2>Migrating content</h2>
<p>This is the hard part. Copy your content over from the <code>/_deploy</code> directory to the <code>/source</code> directory. This is not going to be an exact science. Take a look at what you've got and migrate as neccessary. Your milage may vary.</p>
<p>You can probably get 90% of what you need with these two:</p>
<pre><code>cp _deploy/_posts source/posts
cp _deploy/assets source/assets
</code></pre>
<h2>The _config.yml file</h2>
<p>The two config files are a bit different. You can't just copy the boostrap file over so open them both and copy the individual settings over that you need.</p>
<h2>Preview</h2>
<p>Run the site and check it out. Make sure everything is what you want it to be. When you do a <code>preview</code> Jekyll will place your files in the <code>public</code> directory (which is also ignored by git)</p>
<pre><code>rake preview
</code></pre>
<h2>Final Steps</h2>
<p>Before you do this check the Octopress rake file and change the <code>deploy_default</code> method to &quot;push&quot;. You will find it in a section at the top that looks like this;</p>
<pre><code>## -- Rsync Deploy config -- ##
# Be sure your public key is listed in your server's ~/.ssh/authorized_keys file
ssh_user       = &quot;user@domain.com&quot;
ssh_port       = &quot;22&quot;
document_root  = &quot;~/website.com/&quot;
rsync_delete   = true
rsync_args     = &quot;&quot;  # Any extra arguments to pass to rsync
deploy_default = &quot;push&quot; 
</code></pre>
<p>Now we are going to replace your old site with the new site (at last!)</p>
<p>We need to clear out all of the files on the master branch to make way for the new content.</p>
<pre><code>cd _deploy
git rm -r *
git commit -m &quot;cleaning house&quot;
cd ..
rake deploy
</code></pre>
<p>When you do the deploy it's going to:</p>
<ul>
<li>generate the site and place the contents into the <code>_deploy</code> directory (your master branch)</li>
<li>add and commit everything present to git's origin master.</li>
<li>push the master branch to github.</li>
</ul>
<p>Last don't forget to push your source branch to github!</p>
<pre><code>git push origin source
</code></pre>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Programmers Wanted]]></title>
            <link href="/blog/2013/02/26/programmers-wanted/"/>
            <updated>&lt;p&gt;I have been working as a software developer for about 15 years and I’ve never once feared I would not be able to find a job. Through two recessions, one of which was the biggest economic catastrophe since the great depression, I’ve always had options. I don’t think of myself as a particularly special individual.&lt;/p&gt;&#10;&lt;p&gt;The first tech company I worked for (a start-up), folded when the founder’s mom pulled our funding. I had a job less than a week later. The second company I worked for was bought by a competitor. Even though I was not let go myself, my inbox and voicemail were flooded the day it was made public. I was able to leisurely browse and consider offers from all over town. Many with friends who wooed me with lunch and booze. Everyone was hiring. My co-workers who were let go all had jobs within a month. Most of the rest of the staff quit for greener pastures over the following six months. This was during the middle of the worst economic collapse in 80 years.&lt;/p&gt;&#10;&lt;p&gt;We need more programmers. The competition is fierce. I spend more than a bit of time for work just recruiting and I can tell you that it’s damn hard. Even when you have good salaries, good benefits, cool technology, and the right company culture, finding people is always hard. It’s not unique to Des Moines either. The same story is true all over the country from northern Virginia to Silicon Valley, if you are even a remotely talented programmer you can make very good money at a pretty low stress job where creativity is richly rewarded.&lt;/p&gt;&#10;&lt;p&gt;It’s not going to stop. Companies are finding they can’t just offshore their key products. The quality is just not there because good software requires good communication and that can’t happen when the developers are half a world away. Even if the quality was there we are horribly short of talented developers in India and elsewhere. Think of everything you own that has a computer in it. You phone, your car, your TV. We are painfully short of programmers and the shortage is scheduled to last for the next forever.&lt;/p&gt;&#10;&lt;p&gt;If you are a parent and wondering what kinds of jobs you should encourage your children to follow you would do well to expose them to software development. It’s not for everyone; but it’s also not looked at seriously by enough kids.&lt;/p&gt;&#10;&lt;p&gt;When I was a kid I would turn on my TI 99/4a and my only option was to program. There was nothing else. Today you have to go out and dig a little more. Still there are some great learning opportunities. Here are a few:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;&lt;a href&#61;&quot;http://www.codecademy.com/&quot;&gt;Code Academy&lt;/a&gt;: lets you learn to program from the safety of your browser.&lt;/li&gt;&#10;&#9;&lt;li&gt;&lt;a href&#61;&quot;http://www.alice.org/&quot;&gt;Alice&lt;/a&gt; is a 3d game programming environment for kids.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;P.S. When I say &amp;quot;kids&amp;quot; I don&#39;t mean &amp;quot;boys&amp;quot;. We are even more horribly short on girls.&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/02/26/programmers-wanted/</id>
            <content type="html"><![CDATA[<p>I have been working as a software developer for about 15 years and I’ve never once feared I would not be able to find a job. Through two recessions, one of which was the biggest economic catastrophe since the great depression, I’ve always had options. I don’t think of myself as a particularly special individual.</p>
<p>The first tech company I worked for (a start-up), folded when the founder’s mom pulled our funding. I had a job less than a week later. The second company I worked for was bought by a competitor. Even though I was not let go myself, my inbox and voicemail were flooded the day it was made public. I was able to leisurely browse and consider offers from all over town. Many with friends who wooed me with lunch and booze. Everyone was hiring. My co-workers who were let go all had jobs within a month. Most of the rest of the staff quit for greener pastures over the following six months. This was during the middle of the worst economic collapse in 80 years.</p>
<p>We need more programmers. The competition is fierce. I spend more than a bit of time for work just recruiting and I can tell you that it’s damn hard. Even when you have good salaries, good benefits, cool technology, and the right company culture, finding people is always hard. It’s not unique to Des Moines either. The same story is true all over the country from northern Virginia to Silicon Valley, if you are even a remotely talented programmer you can make very good money at a pretty low stress job where creativity is richly rewarded.</p>
<p>It’s not going to stop. Companies are finding they can’t just offshore their key products. The quality is just not there because good software requires good communication and that can’t happen when the developers are half a world away. Even if the quality was there we are horribly short of talented developers in India and elsewhere. Think of everything you own that has a computer in it. You phone, your car, your TV. We are painfully short of programmers and the shortage is scheduled to last for the next forever.</p>
<p>If you are a parent and wondering what kinds of jobs you should encourage your children to follow you would do well to expose them to software development. It’s not for everyone; but it’s also not looked at seriously by enough kids.</p>
<p>When I was a kid I would turn on my TI 99/4a and my only option was to program. There was nothing else. Today you have to go out and dig a little more. Still there are some great learning opportunities. Here are a few:</p>
<ul>
	<li><a href="http://www.codecademy.com/">Code Academy</a>: lets you learn to program from the safety of your browser.</li>
	<li><a href="http://www.alice.org/">Alice</a> is a 3d game programming environment for kids.</li>
</ul>
<p>P.S. When I say &quot;kids&quot; I don't mean &quot;boys&quot;. We are even more horribly short on girls.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Sprints are a Procrustean Bed]]></title>
            <link href="/blog/2013/02/24/sprints-are-a-procrustean-bed/"/>
            <updated>&lt;p&gt;I’m not a fan of scrum as a methodology or sprints as a practice. I think it is ripe with inefficiencies and waste. The best explanation I can provide comes from the Greeks.&lt;/p&gt;&#10;&lt;p&gt;In Greek mythology there is a character named Procrustes. Now old “Crusty” as I like to call him would invite people passing by his place to stay the night. He had a bed for guests and he would get quite upset if they didn’t fit the bed perfectly. So he would make sure they would by either stretching them if they were too short or chopping off their legs if they were too tall. Eventually Theseus stopped by and fitted Crusty to his own bed.&lt;/p&gt;&#10;&lt;img src&#61;&quot;/assets/images/procrustes.png&quot; align&#61;&quot;right&quot; alt&#61;&quot;Crusty is helping his guest fit the bed&quot; hspace&#61;&quot;10&quot; vspace&#61;&quot;10&quot; /&gt;&#10;&lt;p&gt;Although it’s not a widely used metaphor today, writers have been using “Procrustean Bed” ever since to describe an arbitrary standard to which reality must be fit. Development sprints are often a Procrustean Bed. We place our stories into them and they tend to expand or contract to meet the time requirement. The very act of saying “this must be done in x time” seems to make the thing take x time. If it’s a simple task the developers tend to buffer it with all kinds of other things (needed or not). If it’s too big to fit then corners get cut.&lt;/p&gt;&#10;&lt;p&gt;I much prefer to just do a queue-pull method and concentrate on one thing at a time and letting that thing take the time it needs. I find that the shorter tasks take less time, the longer ones are done right and the team is more honest with the product owners and themselves about how things are going.&lt;/p&gt;&#10;</updated>
            <id>/blog/2013/02/24/sprints-are-a-procrustean-bed/</id>
            <content type="html"><![CDATA[<p>I’m not a fan of scrum as a methodology or sprints as a practice. I think it is ripe with inefficiencies and waste. The best explanation I can provide comes from the Greeks.</p>
<p>In Greek mythology there is a character named Procrustes. Now old “Crusty” as I like to call him would invite people passing by his place to stay the night. He had a bed for guests and he would get quite upset if they didn’t fit the bed perfectly. So he would make sure they would by either stretching them if they were too short or chopping off their legs if they were too tall. Eventually Theseus stopped by and fitted Crusty to his own bed.</p>
<img src="/assets/images/procrustes.png" align="right" alt="Crusty is helping his guest fit the bed" hspace="10" vspace="10" />
<p>Although it’s not a widely used metaphor today, writers have been using “Procrustean Bed” ever since to describe an arbitrary standard to which reality must be fit. Development sprints are often a Procrustean Bed. We place our stories into them and they tend to expand or contract to meet the time requirement. The very act of saying “this must be done in x time” seems to make the thing take x time. If it’s a simple task the developers tend to buffer it with all kinds of other things (needed or not). If it’s too big to fit then corners get cut.</p>
<p>I much prefer to just do a queue-pull method and concentrate on one thing at a time and letting that thing take the time it needs. I find that the shorter tasks take less time, the longer ones are done right and the team is more honest with the product owners and themselves about how things are going.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[My Life as a Cable Cutter]]></title>
            <link href="/blog/2012/12/30/my-life-as-a-cable-cutter/"/>
            <updated>&lt;p&gt;About 8 months ago my family look the plunge and ditched DirectTV for a hodge-podge of Broadcast TV and streaming/download services. Like many people we realized that we were paying over $100 a month to watch House Hunters International and Spongebob Squarepants; it just didn’t seem worth it. We haven’t regretted it for a minute. Lots of people have asked me about our setup so here it is:&lt;/p&gt;&#10;&lt;h3&gt;TV locations:&lt;/h3&gt;&#10;&lt;p&gt;We have 3 TV’s. Two on the main level. The one in the “Front Room” is the primary entertainment TV where we do the majority of our TV and movie watching. There is another in the “Family Room” which is mostly the kids (I have 4 girls 10, 6, 3, 3). The third TV is in our bedroom on the second floor. All of the TV’s are modern flat screens that are digital ready.&lt;/p&gt;&#10;&lt;p&gt;###Antenna:&#10;I went through several rounds of antennas before getting the right one. None of the smaller indoor ones would work. I ended up getting [this one] (http://goo.gl/0sD5Q) from Best Buy. It was on one of those tables of things that had been opened and returned so I think I got it for $90. I installed it in the attic. Lucky for me some former owner of my house ran a huge number of phone wires from the basement up to the attic...except they weren’t connected to anything. So I tied the coax to the end in the basement and then pulled it up into the attic. From the basement I ran the coax into a amplification splitter like [this one] (http://goo.gl/1opPD). Then I ran coax through the ceiling and up the floor close to air return registers. To get to the second floor bedroom I just reversed the line on the outside of the house that had previously been used by the satellite. I could have another splitter in the attic and send it down the wall and into a cable TV port that was never used but that’s for a future project.&lt;/p&gt;&#10;&lt;p&gt;Overall reception is pretty good. I’m getting all the major networks plus their ”extra” channels. The picture seems better than it did with satellite and they don’t go out as much during storms.&lt;/p&gt;&#10;&lt;h3&gt;Tivo and other boxes&lt;/h3&gt;&#10;&lt;p&gt;One of the main things we used our DirectTV box for was DVRing shows. We realized that most of what we were DVRing were broadcast network shows and the few other things we were recording, (like Breaking Bad and The Walking Dead) were available the day after the broadcast on Amazon for a couple of bucks. We still wanted a DVR for broadcast and we also wanted something that would play purchased shows from Amazon or Apple. Since AppleTv does not yet have DVR abilities we got a Tivo.&lt;/p&gt;&#10;&lt;p&gt;I have not been blown over by the Tivo. Supposedly this version was to be the magic device that brought together TV with all of the different online services. Yet right off the bat I had to buy a separate wireless card which seemed awkward in 2012. Then most of the online apps (Netflix, Hulu etc) are noticeably slower and crappier than their Roku counterparts. Still the DVR part is quite nice and it’s cool that it can download entire shows from Amazon. Boxee was not around here when I made the switch (or at least I was completely unaware of it). So I’d advise anyone to look at it before settling on a Tivo.&lt;/p&gt;&#10;&lt;p&gt;For the family room we get Netflix and Hulu through the Nintendo Wii and in our bedroom we have a Roku. I have to say I really like the Roku. It’s super fast and easy and has by far the best experience of the group. If they would just throw a big old hard drive in there I would replace the Tivo in a heartbeat.&lt;/p&gt;&#10;&lt;p&gt;For online services we have Netflix, Hulu and Amazon Prime. We don’t really watch Amazon Prime at all. My wife does quite a bit of our shopping from Amazon and we get prime as part of that but I think I’ve logged into it once. We do get Amazon season passes to our favorite AMC shows but that’s a separate service and they will only download to the Tivo. We also don’t use Hulu a great deal. We might get rid of that if we don’t start watching it more. Netflix streaming on the other hand is the bees knees. We love it and watch it all the time. It’s the secret sauce to the entire thing. The recent addition of Disney content only makes it better.&lt;/p&gt;&#10;&lt;p&gt;Overall I can easily say that we really don’t miss Satellite/Cable at all. My only regret is that we didn’t do it sooner. I highly recommend it. Still I would like to petition the powers at be for the following:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;HBO Go without a satellite/cable subscription.&lt;/li&gt;&#10;&lt;li&gt;A generic OSS way to stream recorded shows from one device to another. I should be able to watch DVR content on the Tivo from my Roku&lt;/li&gt;&#10;&lt;/ul&gt;&#10;</updated>
            <id>/blog/2012/12/30/my-life-as-a-cable-cutter/</id>
            <content type="html"><![CDATA[<p>About 8 months ago my family look the plunge and ditched DirectTV for a hodge-podge of Broadcast TV and streaming/download services. Like many people we realized that we were paying over $100 a month to watch House Hunters International and Spongebob Squarepants; it just didn’t seem worth it. We haven’t regretted it for a minute. Lots of people have asked me about our setup so here it is:</p>
<h3>TV locations:</h3>
<p>We have 3 TV’s. Two on the main level. The one in the “Front Room” is the primary entertainment TV where we do the majority of our TV and movie watching. There is another in the “Family Room” which is mostly the kids (I have 4 girls 10, 6, 3, 3). The third TV is in our bedroom on the second floor. All of the TV’s are modern flat screens that are digital ready.</p>
<p>###Antenna:
I went through several rounds of antennas before getting the right one. None of the smaller indoor ones would work. I ended up getting [this one] (http://goo.gl/0sD5Q) from Best Buy. It was on one of those tables of things that had been opened and returned so I think I got it for $90. I installed it in the attic. Lucky for me some former owner of my house ran a huge number of phone wires from the basement up to the attic...except they weren’t connected to anything. So I tied the coax to the end in the basement and then pulled it up into the attic. From the basement I ran the coax into a amplification splitter like [this one] (http://goo.gl/1opPD). Then I ran coax through the ceiling and up the floor close to air return registers. To get to the second floor bedroom I just reversed the line on the outside of the house that had previously been used by the satellite. I could have another splitter in the attic and send it down the wall and into a cable TV port that was never used but that’s for a future project.</p>
<p>Overall reception is pretty good. I’m getting all the major networks plus their ”extra” channels. The picture seems better than it did with satellite and they don’t go out as much during storms.</p>
<h3>Tivo and other boxes</h3>
<p>One of the main things we used our DirectTV box for was DVRing shows. We realized that most of what we were DVRing were broadcast network shows and the few other things we were recording, (like Breaking Bad and The Walking Dead) were available the day after the broadcast on Amazon for a couple of bucks. We still wanted a DVR for broadcast and we also wanted something that would play purchased shows from Amazon or Apple. Since AppleTv does not yet have DVR abilities we got a Tivo.</p>
<p>I have not been blown over by the Tivo. Supposedly this version was to be the magic device that brought together TV with all of the different online services. Yet right off the bat I had to buy a separate wireless card which seemed awkward in 2012. Then most of the online apps (Netflix, Hulu etc) are noticeably slower and crappier than their Roku counterparts. Still the DVR part is quite nice and it’s cool that it can download entire shows from Amazon. Boxee was not around here when I made the switch (or at least I was completely unaware of it). So I’d advise anyone to look at it before settling on a Tivo.</p>
<p>For the family room we get Netflix and Hulu through the Nintendo Wii and in our bedroom we have a Roku. I have to say I really like the Roku. It’s super fast and easy and has by far the best experience of the group. If they would just throw a big old hard drive in there I would replace the Tivo in a heartbeat.</p>
<p>For online services we have Netflix, Hulu and Amazon Prime. We don’t really watch Amazon Prime at all. My wife does quite a bit of our shopping from Amazon and we get prime as part of that but I think I’ve logged into it once. We do get Amazon season passes to our favorite AMC shows but that’s a separate service and they will only download to the Tivo. We also don’t use Hulu a great deal. We might get rid of that if we don’t start watching it more. Netflix streaming on the other hand is the bees knees. We love it and watch it all the time. It’s the secret sauce to the entire thing. The recent addition of Disney content only makes it better.</p>
<p>Overall I can easily say that we really don’t miss Satellite/Cable at all. My only regret is that we didn’t do it sooner. I highly recommend it. Still I would like to petition the powers at be for the following:</p>
<ul>
<li>HBO Go without a satellite/cable subscription.</li>
<li>A generic OSS way to stream recorded shows from one device to another. I should be able to watch DVR content on the Tivo from my Roku</li>
</ul>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Inferred Interfaces in Static Type Systems]]></title>
            <link href="/blog/2012/10/15/inferred-interfaces-in-static-type-systems/"/>
            <updated>&lt;p&gt;One of the primary criticisms of static languages is that they require needless levels of boilerplate. This can be painfully true, and any C# or Java developer can most likely point to a weird workaround they had to do to use some sealed/final Spring or .Net class. Eventually most large projects become littered with wrappers and adapters and mappers to get objects to “fit” inside the rigid static typing system. But why does the type system have to be so inflexible?&lt;/p&gt;&#10;&lt;p&gt;I’ve had an idea for some time that goes something like this. Lets say you have this C# method:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;public void DoSomething(HttpRequest request){&#10;request.Params ...&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Oh Noes! the dreaded HttpRequest class. So full of sealed horribleness; and all we want is the stupid Params. If I want to be able to test this I can either go through the annoyingly complex process of building a HttpRequest object or I can try and swap out HttpRequest for Microsofts wrapper abstraction (or my own). None of that is nice and in the end I will have a bunch of code I don’t need or want.&lt;/p&gt;&#10;&lt;p&gt;Wouldn’t it be great if I could just add a interface to HttpRequest? It would solve most of my problems. It would be mockable and could define just the parts I need. Unfortunately I can’t break into Redmond and add an interface to that class.&lt;/p&gt;&#10;&lt;p&gt;But why not? Compilers are fast and smart and can figure out all kinds of things. Let say I made this interface for my method:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt; public interface IHttpRequest { Params {get;set;}}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;I don’t see any reason the compiler (and IDE’s) could not look at the requested interface, look at HttpRequest and say “yep, that works.” It would STILL be type safe. It would STILL happen at compile time. It would NOT require anything to happen at runtime, and it would NOT be the same as duck typing because the object could not be just anything that (might) fulfill the request at runtime. The compiler would simply make a shorthand reference the first time it sees that HttpRequest implements IHttpRequest in the context of the package/assembly.&lt;/p&gt;&#10;&lt;p&gt;Maybe for speed there would have to be some kind of keyword on the interface or the param? Maybe not. Hey Anders or whoever is in charge at Oracle&amp;#8230;give me a call, we can work it out.&lt;/p&gt;&#10;&lt;p&gt;Can anyone verify if there are static languages that do this? I have a hunch that Scala’s “traits” are somewhat like this but I’m not sure.&lt;/p&gt;&#10;</updated>
            <id>/blog/2012/10/15/inferred-interfaces-in-static-type-systems/</id>
            <content type="html"><![CDATA[<p>One of the primary criticisms of static languages is that they require needless levels of boilerplate. This can be painfully true, and any C# or Java developer can most likely point to a weird workaround they had to do to use some sealed/final Spring or .Net class. Eventually most large projects become littered with wrappers and adapters and mappers to get objects to “fit” inside the rigid static typing system. But why does the type system have to be so inflexible?</p>
<p>I’ve had an idea for some time that goes something like this. Lets say you have this C# method:</p>
<pre><code>public void DoSomething(HttpRequest request){
request.Params ...
}
</code></pre>
<p>Oh Noes! the dreaded HttpRequest class. So full of sealed horribleness; and all we want is the stupid Params. If I want to be able to test this I can either go through the annoyingly complex process of building a HttpRequest object or I can try and swap out HttpRequest for Microsofts wrapper abstraction (or my own). None of that is nice and in the end I will have a bunch of code I don’t need or want.</p>
<p>Wouldn’t it be great if I could just add a interface to HttpRequest? It would solve most of my problems. It would be mockable and could define just the parts I need. Unfortunately I can’t break into Redmond and add an interface to that class.</p>
<p>But why not? Compilers are fast and smart and can figure out all kinds of things. Let say I made this interface for my method:</p>
<pre><code> public interface IHttpRequest { Params {get;set;}}
</code></pre>
<p>I don’t see any reason the compiler (and IDE’s) could not look at the requested interface, look at HttpRequest and say “yep, that works.” It would STILL be type safe. It would STILL happen at compile time. It would NOT require anything to happen at runtime, and it would NOT be the same as duck typing because the object could not be just anything that (might) fulfill the request at runtime. The compiler would simply make a shorthand reference the first time it sees that HttpRequest implements IHttpRequest in the context of the package/assembly.</p>
<p>Maybe for speed there would have to be some kind of keyword on the interface or the param? Maybe not. Hey Anders or whoever is in charge at Oracle&#8230;give me a call, we can work it out.</p>
<p>Can anyone verify if there are static languages that do this? I have a hunch that Scala’s “traits” are somewhat like this but I’m not sure.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[6 Simple Rules For Handling Collections.]]></title>
            <link href="/blog/2012/06/11/6-simple-rules-for-handling-collections/"/>
            <updated>&lt;p&gt;Simple rules for handling collections. This applies mostly to static languages like C# and Java:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Always use generics if you can. Especially in C# where there are major performance advantages.&lt;/li&gt;&#10;&lt;li&gt;Methods should always accept the simplest abstraction of a collection as possible. Iterable&lt;t&gt; in java, IEnumerable&lt;t&gt; in C#. This gives classes using the method the most flexibility. If you don’t need it to be a list, don’t ask for one.&lt;/t&gt;&lt;/t&gt;&lt;/li&gt;&#10;&lt;li&gt;When returning a list return the most fully functioning implementation you can (without going out of your way&amp;#8230;.this is a very loose rule).&lt;/li&gt;&#10;&lt;li&gt;When returning collections; if you don’t want people to modify the list then return a Immutable/Readonly list&amp;#8230;and let them know it. Don’t hide a Immutable list behind simple interfaces.&lt;/li&gt;&#10;&lt;li&gt;If the collection you return gets passed around a lot, think about making it into a little class. This can either be a wrapper or just extending a collection type. This will let you tweek the implementation and show intent better.&lt;/li&gt;&#10;&lt;li&gt;If #5 is applying to a hashtable, dictionary or map have an even lower tolerance for when you make it a class. I almost never expose a map publicly.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;</updated>
            <id>/blog/2012/06/11/6-simple-rules-for-handling-collections/</id>
            <content type="html"><![CDATA[<p>Simple rules for handling collections. This applies mostly to static languages like C# and Java:</p>
<ol>
<li>Always use generics if you can. Especially in C# where there are major performance advantages.</li>
<li>Methods should always accept the simplest abstraction of a collection as possible. Iterable<t> in java, IEnumerable<t> in C#. This gives classes using the method the most flexibility. If you don’t need it to be a list, don’t ask for one.</t></t></li>
<li>When returning a list return the most fully functioning implementation you can (without going out of your way&#8230;.this is a very loose rule).</li>
<li>When returning collections; if you don’t want people to modify the list then return a Immutable/Readonly list&#8230;and let them know it. Don’t hide a Immutable list behind simple interfaces.</li>
<li>If the collection you return gets passed around a lot, think about making it into a little class. This can either be a wrapper or just extending a collection type. This will let you tweek the implementation and show intent better.</li>
<li>If #5 is applying to a hashtable, dictionary or map have an even lower tolerance for when you make it a class. I almost never expose a map publicly.</li>
</ol>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[A New Kind of CS Major]]></title>
            <link href="/blog/2012/06/01/a-new-kind-of-cs-major/"/>
            <updated>&lt;p&gt;Let me preface this blog post by admitting that I do not have a computer science degree. I majored in community &amp;amp; regional planning. I started out as a fine art major. I tended to avoid mathematics because I found it horribly boring and as a result difficult. I have however, been programming since I got a Texas Instruments 99/4A when I was in 3rd grade.&lt;/p&gt;&#10;&lt;p&gt;The programming world has been preoccupied with CS vs programmers the last week. I wanted to weigh in on an important point that I don’t think has been made.&lt;/p&gt;&#10;&lt;p&gt;Almost anyone can write working software.&lt;/p&gt;&#10;&lt;p&gt;Some people can write very efficient software (you can easily make the case that CS helps with this.)&lt;/p&gt;&#10;&lt;p&gt;In the world of business programming the most desirable trait for code is that it reads well and that other HUMANS can understand it and work with it. A very elegant, program that can solve abstract problems doesn’t mean anything if other programmers can’t grok how to use it. Once more, code that is easy to understand and read is often also efficient and working.&lt;/p&gt;&#10;&lt;p&gt;If I were to create a new major for programmers I think I would put it in the business school. Not with engineering or mathematics. It would center on how to communicate (with humans) through code. How to work with a business to determine requirements. How to make money. It would have required courses in TDD, BDD, CI, agile processes, graphic design, speech communications, and yes, a lot of CS. Most importantly it would have lots of labs where students must make working programs together.&lt;/p&gt;&#10;&lt;p&gt;I have been hiring programmers for over 10 years. My impression of recent CS grads is that they have only 1/3rd of the skills I really want. I do think a CS degree is a great start to a career in IT but we really need the universities to give us something a little different.&lt;/p&gt;&#10;</updated>
            <id>/blog/2012/06/01/a-new-kind-of-cs-major/</id>
            <content type="html"><![CDATA[<p>Let me preface this blog post by admitting that I do not have a computer science degree. I majored in community &amp; regional planning. I started out as a fine art major. I tended to avoid mathematics because I found it horribly boring and as a result difficult. I have however, been programming since I got a Texas Instruments 99/4A when I was in 3rd grade.</p>
<p>The programming world has been preoccupied with CS vs programmers the last week. I wanted to weigh in on an important point that I don’t think has been made.</p>
<p>Almost anyone can write working software.</p>
<p>Some people can write very efficient software (you can easily make the case that CS helps with this.)</p>
<p>In the world of business programming the most desirable trait for code is that it reads well and that other HUMANS can understand it and work with it. A very elegant, program that can solve abstract problems doesn’t mean anything if other programmers can’t grok how to use it. Once more, code that is easy to understand and read is often also efficient and working.</p>
<p>If I were to create a new major for programmers I think I would put it in the business school. Not with engineering or mathematics. It would center on how to communicate (with humans) through code. How to work with a business to determine requirements. How to make money. It would have required courses in TDD, BDD, CI, agile processes, graphic design, speech communications, and yes, a lot of CS. Most importantly it would have lots of labs where students must make working programs together.</p>
<p>I have been hiring programmers for over 10 years. My impression of recent CS grads is that they have only 1/3rd of the skills I really want. I do think a CS degree is a great start to a career in IT but we really need the universities to give us something a little different.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Pair Programming Bingo Part II]]></title>
            <link href="/blog/2011/11/11/pair-programming-bingo-part-ii/"/>
            <updated>&lt;p&gt;Last sprint&amp;#8217;s pair programming bingo worked out pretty good. There was more awareness of pairing and a desire to make sure everyone filled some squares. This sprint we changed it a little. Our PO generated some cards from &lt;a href&#61;&quot;http://print-bingo.com/.&quot;&gt;http://print-bingo.com/.&lt;/a&gt; The cards are random and seem to have a better shot at actually getting bingo for someone.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_luie36O8TT1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/11/11/pair-programming-bingo-part-ii/</id>
            <content type="html"><![CDATA[<p>Last sprint&#8217;s pair programming bingo worked out pretty good. There was more awareness of pairing and a desire to make sure everyone filled some squares. This sprint we changed it a little. Our PO generated some cards from <a href="http://print-bingo.com/.">http://print-bingo.com/.</a> The cards are random and seem to have a better shot at actually getting bingo for someone.</p>
<p><img src="/assets/images/tumblr_luie36O8TT1qhdwsd.jpg" alt=""/></p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Pair Programming Bingo]]></title>
            <link href="/blog/2011/10/28/pair-programming-bingo/"/>
            <updated>&lt;p&gt;We have several different teams all working on the same codebase. Recently we did a cross team retrospective and a couple of related issues came up:&lt;/p&gt;&#10;&lt;ol&gt;&lt;li&gt;The teams wanted to know more about what the other teams were doing.&lt;/li&gt;&#10;&lt;li&gt;A majority of the team members are interested in pairing as a concept but have been reluctant or unsure of how to practice it. This is something the agile coaches have been working on but we really need a kick int he pants.&lt;/li&gt;&#10;&lt;/ol&gt;&lt;p&gt;What came out of the retro was a great idea: Pair Programming Bingo. It works like this:&lt;/p&gt;&#10;&lt;p&gt;Each team has a “Bingo Board” listing all team members along the top and the sides. You get to mark a square once you have paired with another team member for at least a morning or afternoon session. We also have a column for “outside” meaning any member of a different team. members who get “bingo” by having a complete line get a prize. Teams that get a blockout get even bigger prizes. One idea is to line the bingo maps up and make it into a kind of competition.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_ltsg5dsDmL1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;and yes we realize you would only need ½ of a chart but we decided to keep both sides to represent who was the driver and who was the navigator. Anything to encourage more pairing!&lt;/p&gt;&#10;&lt;p&gt;More to come as it evolves&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/10/28/pair-programming-bingo/</id>
            <content type="html"><![CDATA[<p>We have several different teams all working on the same codebase. Recently we did a cross team retrospective and a couple of related issues came up:</p>
<ol><li>The teams wanted to know more about what the other teams were doing.</li>
<li>A majority of the team members are interested in pairing as a concept but have been reluctant or unsure of how to practice it. This is something the agile coaches have been working on but we really need a kick int he pants.</li>
</ol><p>What came out of the retro was a great idea: Pair Programming Bingo. It works like this:</p>
<p>Each team has a “Bingo Board” listing all team members along the top and the sides. You get to mark a square once you have paired with another team member for at least a morning or afternoon session. We also have a column for “outside” meaning any member of a different team. members who get “bingo” by having a complete line get a prize. Teams that get a blockout get even bigger prizes. One idea is to line the bingo maps up and make it into a kind of competition.</p>
<p><img src="/assets/images/tumblr_ltsg5dsDmL1qhdwsd.jpg" alt=""/></p>
<p>and yes we realize you would only need ½ of a chart but we decided to keep both sides to represent who was the driver and who was the navigator. Anything to encourage more pairing!</p>
<p>More to come as it evolves</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Night of the Undead Code]]></title>
            <link href="/blog/2011/10/20/night-of-the-undead-code/"/>
            <updated>&lt;p&gt;I’ve &lt;a href&#61;&quot;http://ryber.tumblr.com/2011/04/19/the-big-book-of-dead-code&quot;&gt;written before about dead code&lt;/a&gt; and how it can gunk up you system, slow you down, and cause all kinds of problems. So with Halloween on its way I wanted to muse on something even worse than dead code&amp;#8230;.undead code. You see most of the code you end up killing in a dead code hunt is not dead yet, its only mostly dead. You have to find out if it’s really holding on for true love or planning on eating your face. So how do you tell? Lets find out.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Dead-Parrot Dead&lt;/strong&gt;: This is the easy stuff. The class or method that is never invoked. The library that’s only imported but never used. This kind of code is easy to remove, it’s very low risk. Don’t listen to the people who tell you that the code is just resting or stunned. It’s kicked the bucket, shuffled off it’s mortal coil, run down the curtain and joined the bleedin&amp;#8217; choir invisibile!! THIS IS EX-CODE!! Clean up the body.  Kill Satisfaction: &lt;em&gt;1 Zombie head&lt;/em&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_lte7e4nuW21qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Ghost Code&lt;/strong&gt;: Ghost code is actually the most common. You probably have it all over your code base and you don’t even know it.  I’ve known developers who have spent their entire careers on projects writing code nobody asked for. Unless you can tie code to a specific business case and it’s bringing value right now (NOT “maybe someday”) then all it’s doing is getting in the way and sucking away your time. Exorcise it now and put it out of it’s misery. Kill Satisfaction: &lt;em&gt;3 Zombie Heads&lt;/em&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Zombie Code&lt;/strong&gt;: A more subtle form of dead code is zombie code. Code that looks alive but actually wants to eat your brain. This is code that is unreachable due to various reasons.  Perhaps its related to a particular entry in a config file that never has a different value. It can also be spotted by a tell tale magic bool being passed to a method which is only ever called with “true” or “false”. At worst the code  is strung throughout complex classes and methods that are only used in one particular way with limited expectations. If a developer ever tells you his code is “flexible” be wary, it might be a zombie.&lt;/p&gt;&#10;&lt;p&gt;These kind of scenarios can be a little harder to dig out, but often have a single kill point. Once you shoot it in the head it leads to an avalanche of deleted code. &lt;em&gt;Kill Satisfaction: 6 heads.&lt;/em&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Vampire Frameworks&lt;/strong&gt;: &lt;img src&#61;&quot;/assets/images/tumblr_lte6ts4mYD1qhdwsd.jpg&quot; align&#61;&quot;right&quot;/&gt; Frameworks are pretty, they solve all of your problems and their perfect 19 year old bodies sparkle while they seduce you with their smoldering eyes. Don&amp;#8217;t be fooled though! Any frameworks that forces you to generate boilerplate after boilerplate that you don&amp;#8217;t find useful (or understand) is pure eeeevil. Even worse are the ones that generate these boilerplate classes themselves and inject their unholy poison all over your app. They suck away your flexibility, your ability to test and your ability to be lightweight. They often are quite good at doing something the way they think you should do it but as soon as you need to do something different (about day 3 in) they make your life a living hell.&lt;/p&gt;&#10;&lt;p&gt;Once established, killing off a framework can be quite hard. You need to stop them as early as possible. Kill Satisfaction: 10 heads.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/10/20/night-of-the-undead-code/</id>
            <content type="html"><![CDATA[<p>I’ve <a href="http://ryber.tumblr.com/2011/04/19/the-big-book-of-dead-code">written before about dead code</a> and how it can gunk up you system, slow you down, and cause all kinds of problems. So with Halloween on its way I wanted to muse on something even worse than dead code&#8230;.undead code. You see most of the code you end up killing in a dead code hunt is not dead yet, its only mostly dead. You have to find out if it’s really holding on for true love or planning on eating your face. So how do you tell? Lets find out.</p>
<p><strong>Dead-Parrot Dead</strong>: This is the easy stuff. The class or method that is never invoked. The library that’s only imported but never used. This kind of code is easy to remove, it’s very low risk. Don’t listen to the people who tell you that the code is just resting or stunned. It’s kicked the bucket, shuffled off it’s mortal coil, run down the curtain and joined the bleedin&#8217; choir invisibile!! THIS IS EX-CODE!! Clean up the body.  Kill Satisfaction: <em>1 Zombie head</em></p>
<p><img src="/assets/images/tumblr_lte7e4nuW21qhdwsd.jpg" alt=""/></p>
<p><strong>Ghost Code</strong>: Ghost code is actually the most common. You probably have it all over your code base and you don’t even know it.  I’ve known developers who have spent their entire careers on projects writing code nobody asked for. Unless you can tie code to a specific business case and it’s bringing value right now (NOT “maybe someday”) then all it’s doing is getting in the way and sucking away your time. Exorcise it now and put it out of it’s misery. Kill Satisfaction: <em>3 Zombie Heads</em></p>
<p><strong>Zombie Code</strong>: A more subtle form of dead code is zombie code. Code that looks alive but actually wants to eat your brain. This is code that is unreachable due to various reasons.  Perhaps its related to a particular entry in a config file that never has a different value. It can also be spotted by a tell tale magic bool being passed to a method which is only ever called with “true” or “false”. At worst the code  is strung throughout complex classes and methods that are only used in one particular way with limited expectations. If a developer ever tells you his code is “flexible” be wary, it might be a zombie.</p>
<p>These kind of scenarios can be a little harder to dig out, but often have a single kill point. Once you shoot it in the head it leads to an avalanche of deleted code. <em>Kill Satisfaction: 6 heads.</em></p>
<p><strong>Vampire Frameworks</strong>: <img src="/assets/images/tumblr_lte6ts4mYD1qhdwsd.jpg" align="right"/> Frameworks are pretty, they solve all of your problems and their perfect 19 year old bodies sparkle while they seduce you with their smoldering eyes. Don&#8217;t be fooled though! Any frameworks that forces you to generate boilerplate after boilerplate that you don&#8217;t find useful (or understand) is pure eeeevil. Even worse are the ones that generate these boilerplate classes themselves and inject their unholy poison all over your app. They suck away your flexibility, your ability to test and your ability to be lightweight. They often are quite good at doing something the way they think you should do it but as soon as you need to do something different (about day 3 in) they make your life a living hell.</p>
<p>Once established, killing off a framework can be quite hard. You need to stop them as early as possible. Kill Satisfaction: 10 heads.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Natural Selection in Code]]></title>
            <link href="/blog/2011/08/17/natural-selection-in-code/"/>
            <updated>&lt;p&gt;Your code is not your child. It’s not a sculpture or a painting. It’s not a hand crafted table and chair set. It’s not going to be around in 5 years, hell it’s not going to be around in 2 months if it ever sees the light of day at all. Eventually you will move on to another project, someone else is going to work on your code, they will have their own ideas, their own needs. They will use your code in ways you never intended, or wanted. They will change your code, for the better, and for the worse. There is nothing you can or should do about any of this. It’s the circle of life. Don’t get attached.&lt;/p&gt;&#10;&lt;p&gt;Like nature, code in a large project with many developers undergoes Darwinian pressures of natural selection.  If you write truly great and clean code. If the purpose is obvious. If there are simple, easy to understand examples of it’s use in both production code and tests then your code will grow and get used. Other developers will start to use it as a pattern, they will use your classes in unexpected and surprising ways counter to your original design. Code that is ugly, hard to understand and use, or that does not provide benefit over other code (even new code) will not get used and eventually will be killed off. If you are an “architect” or “tech lead” the most damage you can do to a project is to interfere with natural selection and force other developers to do things a certain way. Particularly when the classes you wrote suck.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_lq2zdp8yD81qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;Forcing people to use your magical “flexible” framework will only prolong hardships in your app. Despite your best attempts, new mini-frameworks will crop up like weeds as developers either try to get around your bad code or simply don’t understand that it “already does that”. The fact is if your code had been good to begin with people would have happily extended and used it.&lt;/p&gt;&#10;&lt;p&gt;So don’t worry when nobody is using the divine classes you spent so much time on. Figure out why, make improvements, compete. Developers are like water and will always follow the path of least resistance. Make your code that path. Make it the yellow freakin’ brick road. Encourage your own bad code to die, kill off others without worrying about upsetting them. It’s for the greater good after all. Most of all don’t fall in love with your code. It’s not long for this world.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/08/17/natural-selection-in-code/</id>
            <content type="html"><![CDATA[<p>Your code is not your child. It’s not a sculpture or a painting. It’s not a hand crafted table and chair set. It’s not going to be around in 5 years, hell it’s not going to be around in 2 months if it ever sees the light of day at all. Eventually you will move on to another project, someone else is going to work on your code, they will have their own ideas, their own needs. They will use your code in ways you never intended, or wanted. They will change your code, for the better, and for the worse. There is nothing you can or should do about any of this. It’s the circle of life. Don’t get attached.</p>
<p>Like nature, code in a large project with many developers undergoes Darwinian pressures of natural selection.  If you write truly great and clean code. If the purpose is obvious. If there are simple, easy to understand examples of it’s use in both production code and tests then your code will grow and get used. Other developers will start to use it as a pattern, they will use your classes in unexpected and surprising ways counter to your original design. Code that is ugly, hard to understand and use, or that does not provide benefit over other code (even new code) will not get used and eventually will be killed off. If you are an “architect” or “tech lead” the most damage you can do to a project is to interfere with natural selection and force other developers to do things a certain way. Particularly when the classes you wrote suck.</p>
<p><img src="/assets/images/tumblr_lq2zdp8yD81qhdwsd.jpg" alt=""/></p>
<p>Forcing people to use your magical “flexible” framework will only prolong hardships in your app. Despite your best attempts, new mini-frameworks will crop up like weeds as developers either try to get around your bad code or simply don’t understand that it “already does that”. The fact is if your code had been good to begin with people would have happily extended and used it.</p>
<p>So don’t worry when nobody is using the divine classes you spent so much time on. Figure out why, make improvements, compete. Developers are like water and will always follow the path of least resistance. Make your code that path. Make it the yellow freakin’ brick road. Encourage your own bad code to die, kill off others without worrying about upsetting them. It’s for the greater good after all. Most of all don’t fall in love with your code. It’s not long for this world.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Wherefore art var?]]></title>
            <link href="/blog/2011/08/01/wherefore-art-var/"/>
            <updated>&lt;p&gt;To expand on my little rant about Java 7 let me rant about the one feature that almost all other modern languages have that Java lacks and really bugs me.&lt;/p&gt;&#10;&lt;p&gt;var&lt;/p&gt;&#10;&lt;p&gt;Yes, var, it seems like such a little thing, such a minor feature, but it makes refactoring so much easier. Take this statement:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;  var foo &#61; someObj.GetFoo();&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Note how nowhere in this statement does it explicitly say what foo is. It’s still statically typed because the compiler can infer type from GetFoo’s return. Some people might think that’s a problem but we have modern IDE’s so it’s really no big deal.&lt;/p&gt;&#10;&lt;p&gt;The power comes when I want to refactor GetFoo, now as long as whatever it returns has the same signature as the original everything is OK and I never have to touch this file. I might be introducing a interface, or a abstract class or even completely replacing it with some other implementation. It matters not, all that matters is that my change had the smallest impact possible.&lt;/p&gt;&#10;&lt;p&gt;In Java 7 they are introducing some generics stuff where you don’t have to state the type twice. So instead of&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;   Map&amp;lt;String,String&amp;gt; foo &#61; new Map&amp;lt;string,string&amp;gt;();&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;you can do&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;  Map&amp;lt;String,String&amp;gt; foo &#61; new Map&amp;lt;&amp;gt;();&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;This completely misses the point of type inference. All it does is save me some keystokes but it does little to assist future refactorings. The fact that Sun/Oracle spent time on this rather than proper inference features is mind boggling and almost insulting.&lt;/p&gt;&#10;&lt;p&gt;P.S. &lt;a href&#61;&quot;http://projectlombok.org/features/val.html&quot;&gt;someone has made a library to attempt this&lt;/a&gt;. I can’t speak for how well it works or it’s impact as I have not yet used it. I suspect that for type inference to really work well it needs to be baked into the compiler.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/08/01/wherefore-art-var/</id>
            <content type="html"><![CDATA[<p>To expand on my little rant about Java 7 let me rant about the one feature that almost all other modern languages have that Java lacks and really bugs me.</p>
<p>var</p>
<p>Yes, var, it seems like such a little thing, such a minor feature, but it makes refactoring so much easier. Take this statement:</p>
<pre><code>  var foo = someObj.GetFoo();
</code></pre>
<p>Note how nowhere in this statement does it explicitly say what foo is. It’s still statically typed because the compiler can infer type from GetFoo’s return. Some people might think that’s a problem but we have modern IDE’s so it’s really no big deal.</p>
<p>The power comes when I want to refactor GetFoo, now as long as whatever it returns has the same signature as the original everything is OK and I never have to touch this file. I might be introducing a interface, or a abstract class or even completely replacing it with some other implementation. It matters not, all that matters is that my change had the smallest impact possible.</p>
<p>In Java 7 they are introducing some generics stuff where you don’t have to state the type twice. So instead of</p>
<pre><code>   Map&lt;String,String&gt; foo = new Map&lt;string,string&gt;();
</code></pre>
<p>you can do</p>
<pre><code>  Map&lt;String,String&gt; foo = new Map&lt;&gt;();
</code></pre>
<p>This completely misses the point of type inference. All it does is save me some keystokes but it does little to assist future refactorings. The fact that Sun/Oracle spent time on this rather than proper inference features is mind boggling and almost insulting.</p>
<p>P.S. <a href="http://projectlombok.org/features/val.html">someone has made a library to attempt this</a>. I can’t speak for how well it works or it’s impact as I have not yet used it. I suspect that for type inference to really work well it needs to be baked into the compiler.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Java 7: The pink bunny suit of updates]]></title>
            <link href="/blog/2011/07/30/java-7-the-pink-bunny-suit-of-updates/"/>
            <updated>&lt;p&gt;Recently I changed jobs and with it the programming language I get to spend the majority of my time in. I had been doing mostly C# day in day out with occasional forlays into java. Now I’ll be doing Java full time so I wanted to get back into what was hip and happening in the world of java&lt;/p&gt;&#10;&lt;p&gt;What I’ve found is a party that all the cool kids left hours ago. I don’t know if it’s the oracle takeover or if it started before that but the whole scene just feels sad and lonely. The recent announcement of the features in Java 7 adds to it.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_lp5jz1qhkJ1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;7 can easily be summed up as the programmers version of Ralph’s present from his aunt in “A Christmas Story”. We wanted lambdas and all we got we got was strings in case statements. Seriously, they should have just snuck the strings-in-cases thing in without pointing it out because everyone is just making fun of the fact that it took until version 7 to get it.&lt;/p&gt;&#10;&lt;p&gt;Oh well, I guess the Scala party down the road is where everyone went. I hear they have a keg&amp;#8230;and closures.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/07/30/java-7-the-pink-bunny-suit-of-updates/</id>
            <content type="html"><![CDATA[<p>Recently I changed jobs and with it the programming language I get to spend the majority of my time in. I had been doing mostly C# day in day out with occasional forlays into java. Now I’ll be doing Java full time so I wanted to get back into what was hip and happening in the world of java</p>
<p>What I’ve found is a party that all the cool kids left hours ago. I don’t know if it’s the oracle takeover or if it started before that but the whole scene just feels sad and lonely. The recent announcement of the features in Java 7 adds to it.</p>
<p><img src="/assets/images/tumblr_lp5jz1qhkJ1qhdwsd.jpg" alt=""/></p>
<p>7 can easily be summed up as the programmers version of Ralph’s present from his aunt in “A Christmas Story”. We wanted lambdas and all we got we got was strings in case statements. Seriously, they should have just snuck the strings-in-cases thing in without pointing it out because everyone is just making fun of the fact that it took until version 7 to get it.</p>
<p>Oh well, I guess the Scala party down the road is where everyone went. I hear they have a keg&#8230;and closures.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[Some Thoughts on GeoLearning]]></title>
            <link href="/blog/2011/07/17/some-thoughts-on-geolearning/"/>
            <updated>&lt;p&gt;The resume I snail-mailed into GeoLearning over eleven years ago was replica British WWII propaganda poster. I didn’t have a lot of “official” experience at the time so I thought I would make up for it in style. It worked, The CEO called me the day he got it, we went to lunch, then over to CompUSA and picked out a new G4 Macintosh. I pushed my first product live a few days later. That was Geo; fast paced and personal.&lt;/p&gt;&#10;&lt;p&gt;Eleven years is a lifetime in the tech world to be somewhere. I often tell people that in reality Geo was at least three different companies over my tenure. There was the early cowboy hacker startup phase; the professional services “we’ll customize anything for anyone” middle phase; and finally the SASS app agile/TDD rock star halcyon days that ended with our eventual acquisition. It really was the kind of place where it was what you made of it. You could learn a lot, work on interesting projects, improve the product on your own initiative, and interact with some of the best peers in town. That’s not to say it was all wine and roses but overall people with the right attitude and a little patience could go quite far.&lt;/p&gt;&#10;&lt;p&gt;The key was, the company was never satisfied with itself. It was constantly experimenting and changing and had great courage to make leaps other companies would never have considered. Sometimes we failed epically, but failure was OK as long as you learned. In the end, that’s one of the best things you can find in a company.&lt;/p&gt;&#10;&lt;p&gt;I really owe my career to the people I worked with at Geo. I don’t know where my career would have taken me elsewhere but I’m sure it would not have been as good. So a big thanks to Frank and the executive team for creating a company environment where IT was allowed to be IT; and a huge thank you to all of my fellow developers, you guys are truly rock stars.&lt;/p&gt;&#10;&lt;p&gt;As to why I am leaving. Let’s just say that the new company is not GeoLearning.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/07/17/some-thoughts-on-geolearning/</id>
            <content type="html"><![CDATA[<p>The resume I snail-mailed into GeoLearning over eleven years ago was replica British WWII propaganda poster. I didn’t have a lot of “official” experience at the time so I thought I would make up for it in style. It worked, The CEO called me the day he got it, we went to lunch, then over to CompUSA and picked out a new G4 Macintosh. I pushed my first product live a few days later. That was Geo; fast paced and personal.</p>
<p>Eleven years is a lifetime in the tech world to be somewhere. I often tell people that in reality Geo was at least three different companies over my tenure. There was the early cowboy hacker startup phase; the professional services “we’ll customize anything for anyone” middle phase; and finally the SASS app agile/TDD rock star halcyon days that ended with our eventual acquisition. It really was the kind of place where it was what you made of it. You could learn a lot, work on interesting projects, improve the product on your own initiative, and interact with some of the best peers in town. That’s not to say it was all wine and roses but overall people with the right attitude and a little patience could go quite far.</p>
<p>The key was, the company was never satisfied with itself. It was constantly experimenting and changing and had great courage to make leaps other companies would never have considered. Sometimes we failed epically, but failure was OK as long as you learned. In the end, that’s one of the best things you can find in a company.</p>
<p>I really owe my career to the people I worked with at Geo. I don’t know where my career would have taken me elsewhere but I’m sure it would not have been as good. So a big thanks to Frank and the executive team for creating a company environment where IT was allowed to be IT; and a huge thank you to all of my fellow developers, you guys are truly rock stars.</p>
<p>As to why I am leaving. Let’s just say that the new company is not GeoLearning.</p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[The Big Book Of Dead Code]]></title>
            <link href="/blog/2011/04/19/the-big-book-of-dead-code/"/>
            <updated>&lt;p&gt;Several years ago I became the inheritor of a rather large codebase that had been farmed out to an R&amp;amp;D team of contractors. I could go on with a litany of grievances about the delivered product but I&amp;#8217;ll leave most of those for other posts. Todays issue is about dead code. When we got the application it was quite bloated with unfinished and forgotten features. Imagine going to look into a bug only to find that there are 3 different modules that do the same thing; only one of which was actually used. There were entire assemblies that did nothing, or very little. Lots of modules were &amp;#8220;flexible&amp;#8221; but then configured to just work one (very simple) way.&lt;/p&gt;&#10;&lt;p&gt;How it got this way could be a good masters thesis on the dangers of waterfall and cramming every possible requirement into a bloated spec at the begining, but regardless of that, the team had a problem.&lt;/p&gt;&#10;&lt;p&gt;Extra and unnecessary code made building slow, made performance slow, and made testing slow and very difficult. It was confusing for developers to to have to deal with and it wasted all kinds of time with rabbit holes and marathon sessions in the debugger. Worst of all there were few tests to document the behavior.&lt;/p&gt;&#10;&lt;p&gt;Finally after a particularly difficult weekend the team had had enough. We made some time, got out the machete and started to hack away at the dead flesh. The result was a faster, less confusing, less buggy system that performed all of the same duties as the original app. Dev velocity went up as build times and time in the debugger went down. Occasionally there would be second guessing, &amp;#8220;What if we need that some day?&amp;#8221;, &amp;#8220;Well, that way IS more flexible&amp;#8221;, but you know what? That&amp;#8217;s what version control is for. To this day I have yet to go hunting back in time looking for some of that dead code.&lt;/p&gt;&#10;&lt;p&gt;The other result was legend&amp;#8230;&amp;#8221;The Big Book of Dead Code&amp;#8221;. The more and more code I hacked away the angrier I got. I watched as developers I knew from the R&amp;amp;D team disappeared like they had never existed. It was never their fault that they were asked to write something the product never needed to begin with.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_ljwfsjJT9O1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;We needed to be able to show to management how much waste a gigantic 2 year waterfall project produced. So I took the diffs and wrote a little script (called &amp;#8220;Bring Out Yer Dead&amp;#8221;) that took the deleted code, removed all of the spaces, tabs and line breaks, formatted everything into a sigle block of raw text and then printed it all out in a 9pt font front and back. As the code was removed the book grew.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_ljwft3bUOZ1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;It ended up being easily over 500 pages. 500 pages of blood, sweat, yak hair and money. The book became famous, people would come from far and wide to gaze in wonder. I never saw the look on the owners faces when they were shown it, but I was told that it was very sobering. It ended up becoming a symbol of development black holes. Never again would management tolerate non-incremental development and gold plated specs. We would deliver small bits quickly, we would adjust requirements as needed. We would do only what needed to be done. Keep it simple! Yagni! &amp;#8220;Bring out Yer Dead!&amp;#8221;&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_ljwftmvV0B1qhdwsd.jpg&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/04/19/the-big-book-of-dead-code/</id>
            <content type="html"><![CDATA[<p>Several years ago I became the inheritor of a rather large codebase that had been farmed out to an R&amp;D team of contractors. I could go on with a litany of grievances about the delivered product but I&#8217;ll leave most of those for other posts. Todays issue is about dead code. When we got the application it was quite bloated with unfinished and forgotten features. Imagine going to look into a bug only to find that there are 3 different modules that do the same thing; only one of which was actually used. There were entire assemblies that did nothing, or very little. Lots of modules were &#8220;flexible&#8221; but then configured to just work one (very simple) way.</p>
<p>How it got this way could be a good masters thesis on the dangers of waterfall and cramming every possible requirement into a bloated spec at the begining, but regardless of that, the team had a problem.</p>
<p>Extra and unnecessary code made building slow, made performance slow, and made testing slow and very difficult. It was confusing for developers to to have to deal with and it wasted all kinds of time with rabbit holes and marathon sessions in the debugger. Worst of all there were few tests to document the behavior.</p>
<p>Finally after a particularly difficult weekend the team had had enough. We made some time, got out the machete and started to hack away at the dead flesh. The result was a faster, less confusing, less buggy system that performed all of the same duties as the original app. Dev velocity went up as build times and time in the debugger went down. Occasionally there would be second guessing, &#8220;What if we need that some day?&#8221;, &#8220;Well, that way IS more flexible&#8221;, but you know what? That&#8217;s what version control is for. To this day I have yet to go hunting back in time looking for some of that dead code.</p>
<p>The other result was legend&#8230;&#8221;The Big Book of Dead Code&#8221;. The more and more code I hacked away the angrier I got. I watched as developers I knew from the R&amp;D team disappeared like they had never existed. It was never their fault that they were asked to write something the product never needed to begin with.</p>
<p><img src="/assets/images/tumblr_ljwfsjJT9O1qhdwsd.jpg" alt=""/></p>
<p>We needed to be able to show to management how much waste a gigantic 2 year waterfall project produced. So I took the diffs and wrote a little script (called &#8220;Bring Out Yer Dead&#8221;) that took the deleted code, removed all of the spaces, tabs and line breaks, formatted everything into a sigle block of raw text and then printed it all out in a 9pt font front and back. As the code was removed the book grew.</p>
<p><img src="/assets/images/tumblr_ljwft3bUOZ1qhdwsd.jpg" alt=""/></p>
<p>It ended up being easily over 500 pages. 500 pages of blood, sweat, yak hair and money. The book became famous, people would come from far and wide to gaze in wonder. I never saw the look on the owners faces when they were shown it, but I was told that it was very sobering. It ended up becoming a symbol of development black holes. Never again would management tolerate non-incremental development and gold plated specs. We would deliver small bits quickly, we would adjust requirements as needed. We would do only what needed to be done. Keep it simple! Yagni! &#8220;Bring out Yer Dead!&#8221;</p>
<p><img src="/assets/images/tumblr_ljwftmvV0B1qhdwsd.jpg" alt=""/></p>
]]>
            </content>
        </entry>
        <entry>
            <title type="html"><![CDATA[C# Build Times]]></title>
            <link href="/blog/2011/04/18/c-build-times/"/>
            <updated>&lt;p&gt;Today a friend was expressing concern about C# test loop times. Even going so far as comparing it to &lt;em&gt;gasp&lt;/em&gt; C++&lt;/p&gt;&#10;&lt;p&gt;He challenged me to &amp;#8221; please see if you can get a smallish project, maybe 1K unit tests (ignore other tests) to build and run in &amp;lt;45s &amp;amp; blog it!!&amp;#8221;&lt;/p&gt;&#10;&lt;p&gt;Well, lately I&amp;#8217;ve been working on setting up a integration test suite for Ninject, so I was familiar with it as not just a small, fast C# library, But one that is quite popular.&lt;/p&gt;&#10;&lt;p&gt;So here is the result. For just the build/test of the core project total time from the command line is between 4-5 seconds. 2 of that is running the 223 unit and integration tests.&lt;/p&gt;&#10;&lt;p&gt;&lt;img src&#61;&quot;/assets/images/tumblr_ljvimpibdW1qhdwsd.png&quot; alt&#61;&quot;&quot;/&gt;&lt;/p&gt;&#10;&lt;p&gt;For a total CI package/build including generating packages for .Net 2.0, 3.5, 4.0, 3.5 compact, and silverlight 2, 3 and 4 which adds up to 669 tests takes around 1:45 - 2 minutes.&lt;/p&gt;&#10;&lt;p&gt;So I&amp;#8217;d say that shows that .net is at least capable of having fast cycle times. The thing that&amp;#8217;s still missing are good autotest tools. IntelliJ and Eclipse smoke VS in terms of testing and refactoring. ReSharper&amp;#8230;as good as it is&amp;#8230;does nothing for the rest of the bloat in studio.&lt;/p&gt;&#10;&lt;p&gt;Now, if only we could get JetBrains to make a ReSharper for MonoDevelop we would be all set.&lt;/p&gt;&#10;</updated>
            <id>/blog/2011/04/18/c-build-times/</id>
            <content type="html"><![CDATA[<p>Today a friend was expressing concern about C# test loop times. Even going so far as comparing it to <em>gasp</em> C++</p>
<p>He challenged me to &#8221; please see if you can get a smallish project, maybe 1K unit tests (ignore other tests) to build and run in &lt;45s &amp; blog it!!&#8221;</p>
<p>Well, lately I&#8217;ve been working on setting up a integration test suite for Ninject, so I was familiar with it as not just a small, fast C# library, But one that is quite popular.</p>
<p>So here is the result. For just the build/test of the core project total time from the command line is between 4-5 seconds. 2 of that is running the 223 unit and integration tests.</p>
<p><img src="/assets/images/tumblr_ljvimpibdW1qhdwsd.png" alt=""/></p>
<p>For a total CI package/build including generating packages for .Net 2.0, 3.5, 4.0, 3.5 compact, and silverlight 2, 3 and 4 which adds up to 669 tests takes around 1:45 - 2 minutes.</p>
<p>So I&#8217;d say that shows that .net is at least capable of having fast cycle times. The thing that&#8217;s still missing are good autotest tools. IntelliJ and Eclipse smoke VS in terms of testing and refactoring. ReSharper&#8230;as good as it is&#8230;does nothing for the rest of the bloat in studio.</p>
<p>Now, if only we could get JetBrains to make a ReSharper for MonoDevelop we would be all set.</p>
]]>
            </content>
        </entry>
</feed>
